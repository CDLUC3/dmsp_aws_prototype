AWSTemplateFormatVersion: '2010-09-09'

Description: 'EventBridge for the DMPHub'

Parameters:
  Env:
    Type: 'String'
    Default: 'dev'

  SsmPath:
    Type: 'String'

  DomainName:
    Type: 'String'

  LogRetentionDays:
    Type: 'Number'
    Default: 7

  ArchiveRetentionDays:
    Type: 'Number'
    Default: 14

Resources:
  # -------------------------------------------------------
  # The Event Bus for the DMPHub System
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_Events.html
  # -------------------------------------------------------
  EventBus:
    Type: 'AWS::Events::EventBus'
    Properties:
      Name: !Sub "${AWS::StackName}-eventbridge"

  # Policy that allows EventBus to create events
  EventBusPolicy:
    Type: 'AWS::Events::EventBusPolicy'
    Properties:
      EventBusName: !Ref EventBus
      StatementId: !Sub "${AWS::StackName}-eventbus-policy"
      Statement:
        Effect: 'Allow'
        Principal: '*'
        Action: 'events:PutEvents'
        Resource: !GetAtt EventBus.Arn
        Condition:
            StringEquals:
                "aws:PrincipalOrgID": !Ref AWS::AccountId

  # -----------------------------
  # IAM Role that will be used by EventBridge to invoke Lambda Functions
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
  # -----------------------------
  # Role that allows EventBridge to invoke these Lambdas
  EventBridgeLambdaInvocationRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${AWS::StackName}-InvocationRole'
      Description: !Sub '%{AWS::StackName} - Role to invoke lambda functions'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action: 'sts:AssumeRole'
          Principal:
            Service: 'events.amazonaws.com'
      Policies:
        - PolicyName: !Sub 'dmp-hub-${Env}-eventbridge-invoke'
          PolicyDocument: !Sub >
            {
              "Version": "2012-10-17",
              "Statement": {
                "Effect": "Allow",
                "Action": [
                  "lambda:InvokeFunction"
                ],
                "Resource": "*"
              }
            }

  # ----------------------------------------------------------------
  # IAM Managed Policies for reading and publishing to the EventBus
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html
  # ----------------------------------------------------------------
  # Policy that allows other Resources to read and publish messages on the EventBus
  EventBusManagedPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: !Sub '${AWS::StackName} - Allow access to read/write messages to the EventBus'
      ManagedPolicyName: !Sub '${AWS::StackName}-Policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 'events:PutEvents'
          Resource: !GetAtt EventBus.Arn

  # Archive used to stash DMP ID updates to EZID
  EventBusArchive:
    Type: 'AWS::Events::Archive'
    Properties:
      EventPattern:
        source:
          - !Sub "${DomainName}:lambda:event_publisher"
        detail-type: ["EZID update"]
      RetentionDays: !Ref ArchiveRetentionDays
      SourceArn: !GetAtt EventBus.Arn

  # Add the EventBus ARN to SSM so that our Lambdas can access it (EventBus doesn't have tags :/)
  EventBusArnParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "${AWS::StackName} EventBus ARN"
      Name: !Sub "${SsmPath}EventBusArn"
      # Note: AWS CloudFormation does not yet support creating a SecureString parameter type.
      Type: 'String'
      Value: !GetAtt EventBus.Arn

  # LogGroup used in conjunction with the CloudWatchRule below for testing/debugging
  EventBridgeLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogRetentionDays

  # Rule that can be used for debuggging/testing. All events will get stuffed into the LogGroup
  # Set the 'State' to 'DISABLED' when you're not debugging
  CloudWatchLogRule:
    Type: 'AWS::Events::Rule'
    Properties:
      # Description: !Sub "${AWS::StackName} CloudWatch Log to monitor/debug EventBridge"
      EventBusName: !GetAtt EventBus.Arn
      EventPattern: !Sub >
        {
          "source": ["${DomainName}:lambda:event_publisher"]
        }
      Name: !Sub "${AWS::StackName}-logs"
      State: 'ENABLED'
      Targets:
        # !GetAtt EventBridgeLogGroup.Arn
        - Arn: !GetAtt EventBridgeLogGroup.Arn
          Id: !Sub "${AWS::StackName}-logs"

  # Policy that allows EventBridge LogGroup Rule to write to the LogGroup
  EventBusCloudWatchPolicy:
    Type: 'AWS::Logs::ResourcePolicy'
    Properties:
      PolicyName: !Sub "${AWS::StackName}-logs"
      PolicyDocument: !Sub >
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "events.amazonaws.com",
                  "delivery.logs.amazonaws.com"
                ]
              },
              "Resource": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}*:*"
            }
          ]
        }

Outputs:
  EventBusName:
    Value: !Ref EventBus

  EventBusArn:
    Value: !GetAtt EventBus.Arn

  EventBridgeLambdaInvocationRoleId:
    Value: !GetAtt EventBridgeLambdaInvocationRole.RoleId

  EventBridgeLambdaInvocationRoleArn:
    Value: !GetAtt EventBridgeLambdaInvocationRole.Arn

  EventBusPolicy:
    Value: !Ref EventBusPolicy

  EventBusManagedPolicyArn:
    Value: !Ref EventBusManagedPolicy

  EventBusArchiveId:
    Value: !Ref EventBusArchive

  EventBusArchiveArn:
    Value: !GetAtt EventBusArchive.Arn

  EventBridgeLogGroupArn:
    Value: !GetAtt EventBridgeLogGroup.Arn
