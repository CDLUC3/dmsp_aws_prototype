AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: 'DMPHub Lambda functions that are invoked directly by other Lambdas'

Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'

  AppName:
    Type: 'String'

  LogGroupArn:
    Type: 'String'

  CodeStarConnectionArn:
    Type: 'String'

Resources:
  # ----------------------------------------------
  # Simple Storage Service (S3) buckets
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html
  # ----------------------------------------------
  S3PipelineBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true

  # S3 Bucket to push Lambda code to so that it can be signed
  S3LambdaCodeSigningBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
      VersioningConfiguration:
        Status: 'Enabled'

  # S3 Bucket to store signed Lambda artifacts
  S3LambdaRepositoryBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
      VersioningConfiguration:
        Status: 'Enabled'

  # -----------------------------------------------------------
  # EC2 Security Groups (used by CodeBuild)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  # -----------------------------------------------------------
  CodeBuildSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AppName}-codebuild-secgrp'
      GroupDescription: !Sub '${AppName} CodeBuild SecurityGroup'
      VpcId: !Ref VpcId
      Tags:
        - Key: 'ConfigExclude'
          Value: 'SecGrp-uc3-dmp-hub-dev-CodeBuild'

  # -----------------------------------------------------------
  # Identitity and Access Management (IAM)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_IAM.html
  # -----------------------------------------------------------
  CodePipelineIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'codepipeline.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${AppName}-pipline-policy'
          PolicyDocument: !Sub >
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["codestar-connections:UseConnection"],
                  "Resource": "${CodeStarConnectionArn}"
                }
              ]
            }
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSCodePipelineFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess'
        - 'arn:aws:iam::aws:policy/AWSCodeDeployDeployerAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'

  CodeBuildIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'codebuild.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSLambda_FullAccess'
        - 'arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds'
      Policies:
        - PolicyName: !Sub '${AppName}-build-policy'
          PolicyDocument: !Sub >
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:AssociateKmsKey"
                  ],
                  "Resource": [
                    "${LogGroupArn}"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*",
                    "ec2:CreateNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeDhcpOptions",
                    "ec2:DescribeVpcs",
                    "ec2:CreateNetworkInterfacePermission"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["codestar-connections:UseConnection"],
                  "Resource": "${CodeStarConnectionArn}"
                }
              ]
            }

  CodeDeployIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'codedeploy.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess'

  # -----------------------------------------------------------
  # Code Signing profile
  #   see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-signer-signingprofile.html
  # -----------------------------------------------------------
  # SigningProfile:
  #   Type: 'AWS::Signer::SigningProfile'
  #   Properties:
  #     PlatformId: 'AWSLambda-SHA384-ECDSA'

  # -----------------------------------------------------------
  # Code Signing configuration
  #   see: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-codesigningconfig.html
  # -----------------------------------------------------------
  # CodeSigningConfig:
  #   Type: 'AWS::Lambda::CodeSigningConfig'
  #   Properties:
  #     AllowedPublishers:
  #       SigningProfileVersionArns:
  #         - !GetAtt SigningProfile.Arn
  #    CodeSigningPolicies:
  #       UntrustedArtifactOnDeployment: 'Enforce'
  #     Description: !Sub '${AppName} Code Signing config for Lambdas managed by CodePipeline'

Outputs:
  CodePipelineS3BucketId:
    Value: !Ref S3PipelineBucket

  S3LambdaCodeSigningBucketId:
    Value: !Ref S3LambdaCodeSigningBucket

  S3LambdaRepositoryBucketId:
    Value: !Ref S3LambdaRepositoryBucket

  CodeBuildSecurityGroupId:
    Value: !GetAtt CodeBuildSecurityGroup.GroupId

  CodePipelineIAMRoleId:
    Value: !Ref CodePipelineIAMRole
  CodePipelineIAMRoleArn:
    Value: !GetAtt CodePipelineIAMRole.Arn

  CodeBuildIAMRoleId:
    Value: !Ref CodeBuildIAMRole
  CodeBuildIAMRoleArn:
    Value: !GetAtt CodeBuildIAMRole.Arn

  CodeDeployIAMRoleId:
    Value: !Ref CodeDeployIAMRole
  CodeDeployIAMRoleArn:
    Value: !GetAtt CodeDeployIAMRole.Arn

  # CodeSigningConfigArn:
  #   Value: !GetAtt CodeSigningConfig.CodeSigningConfigArn
