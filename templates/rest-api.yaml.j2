---
{% import 'lambda-dict.j2' as imported %}
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: 'API Gateway, CloudFront, Route53, ACM and WAF config'

Parameters:
  AppName:
    Type: 'String'
  Env:
    Type: 'String'
  DomainName:
    Type: 'String'

  VpcId:
    Type: 'String'

  HostedZoneId:
    Type: 'String'

  ApiStageName:
    Type: 'String'

  LambdaFunctionStackName:
    Type: 'String'

  CertificateArn:
    Type: 'String'

  SystemsUserPoolId:
    Type: 'String'
  SystemsUserPoolArn:
    Type: 'String'

  S3LogBucketId:
    Type: 'String'

  ApplicationLogGroupId:
    Type: 'String'
  ApplicationLogGroupArn:
    Type: 'String'

Resources:
  # -----------------------------------------------------------
  # Identitity and Access Management (IAM)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_IAM.html
  # -----------------------------------------------------------
  ApiRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'apigateway.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: /
      # Preference here would be to send to our LogGroup instead of allowing it to create it's own
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'

  # ------------------------------------------------------------
  # ApiGateway REST API resources
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-restapi-endpointconfiguration.html
  # -----------------------------------------------------------
  ApiAccount:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt ApiRole.Arn

  RestApi:
    Type: 'AWS::ApiGateway::RestApi'
    DependsOn:
      - ApiAccount
    # DeletionPolicy: Retain
    Properties:
      Name: !Sub '${AppName}${Env}RestApi'
      BinaryMediaTypes:
        - 'application~pdf'
      ApiKeySourceType: 'HEADER'
      DisableExecuteApiEndpoint: false
      FailOnWarnings: true
      # Anything over 25kb will be compressed if the Accept header allows it
      MinimumCompressionSize: 25000
      EndpointConfiguration:
        Types:
          - 'EDGE'

  # Authorizer to allow Cognito to authorize access to the REST API
  SystemsAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      Name: !Sub '${AppName}${Env}SystemsAuthorizer'
      Type: 'COGNITO_USER_POOLS'
      IdentitySource: 'method.request.header.Authorization'
      ProviderARNs:
        - !Ref SystemsUserPoolArn
      RestApiId: !Ref RestApi

  # ApiGateway REST API Endpoint resources
  # ----------------------------------------------------------------------
  DmpsResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      PathPart: 'dmps'
      # There is no parent resource so point to the RestAPI itself
      ParentId: !GetAtt RestApi.RootResourceId
      RestApiId: !Ref RestApi

  DmpResource:
    Type: 'AWS::ApiGateway::Resource'
    DependsOn:
      - DmpsResource
    Properties:
      PathPart: '{dmp_id+}'
      # There is no parent resource so point to the RestAPI itself
      ParentId: !Ref DmpsResource
      RestApiId: !Ref RestApi

  {% for lambda_dict in imported.API_LAMBDAS %}
  # Build out the API endpoints for each Lambda that has a SourceArn defined
  {% if lambda_dict['api_method'] is defined %}
  {{lambda_dict['name']}}Permission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !ImportValue
        'Fn::Sub': '${LambdaFunctionStackName}-{{lambda_dict['name']}}FunctionId'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ':'
          - !Ref AWS::AccountId
          - ':'
          - !Ref RestApi
          - '/*/{{lambda_dict['api_method']}}{{lambda_dict['api_source_arn_suffix']}}'

  {{lambda_dict['name']}}ApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      OperationName: '{{lambda_dict['name']}}'
      HttpMethod: '{{lambda_dict['api_method']}}'
      {% if '{dmp_id+}' in lambda_dict['api_source_arn_suffix'].split('/') %}
      ResourceId: !Ref DmpResource
      {% else %}
      ResourceId: !Ref DmpsResource
      {% endif %}
      RestApiId: !Ref RestApi
      {% if lambda_dict['cognito'] == 'true' %}
      AuthorizationType: 'NONE'
      # AuthorizationType: 'COGNITO_USER_POOLS'
      # AuthorizerId: !Ref SystemsAuthorizer
      # AuthorizationScopes:
        {% if lambda_dict['api_method'] == 'GET' %}
      #   - !Sub "https://${DomainName}/api.read"
        {% else %}
      #   - !Sub "https://${DomainName}/api.write"
        {% endif %}
      {% else %}
      AuthorizationType: 'NONE'
      {% endif %}
      Integration:
        Type: 'AWS_PROXY'
        IntegrationHttpMethod: 'POST'
        Uri: !Join
        - ''
        - - 'arn:'
          - !Ref 'AWS::Partition'
          - ':apigateway:'
          - !Ref 'AWS::Region'
          - ':lambda:path/2015-03-31/functions/'
          - !ImportValue
              'Fn::Sub': '${LambdaFunctionStackName}-{{lambda_dict['name']}}FunctionArn'
          - '/invocations'
  {% endif %}
  {% endfor %}

  # -----------------------------------------------------------
  # Deployment and Stage
  # -----------------------------------------------------------
  RestApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      {% for lambda_dict in imported.API_LAMBDAS %}
      {% if lambda_dict['api_method'] is defined %}
      - {{lambda_dict['name']}}ApiMethod
      {% endif %}
      {% endfor %}
    Properties:
      RestApiId: !Ref RestApi
      Description: 'Initial deployment of the DMPHub API'

  RestApiStage:
    Type: 'AWS::ApiGateway::Stage'
    DependsOn:
      - RestApiDeployment
    Properties:
      StageName: !Ref ApiStageName
      Description: !Sub "DMPHub Rest API ${ApiStageName}"
      RestApiId: !Ref RestApi
      DeploymentId: !Ref RestApiDeployment
      TracingEnabled: true
      # DocumentationVersion: !Ref MyDocumentationVersion
      # ClientCertificateId: !Ref ClientCertificate
      AccessLogSetting:
        DestinationArn: !Ref ApplicationLogGroupArn
        # Cloud Formation requires the format to be a single line string (no newlines) :/
        Format: '{"requestId":"$context.requestId","extendedRequestId":"$context.extendedRequestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","wafResponseCode":"$context.wafResponseCode","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
      MethodSettings:
        {% for lambda_dict in imported.API_LAMBDAS %}
        {% if lambda_dict['api_method'] is defined %}
        - ResourcePath: '{{lambda_dict['api_source_arn_suffix']}}'
          # maybe needs a trailing slash when no {dmp_id+} is present
          HttpMethod: '{{lambda_dict['api_method']}}'
          ThrottlingBurstLimit: 25
          ThrottlingRateLimit: 25
          CachingEnabled: true
          CacheTtlInSeconds: 180
          MetricsEnabled: true
          DataTraceEnabled: true
          LoggingLevel: INFO
        {% endif %}
        {% endfor %}

  RestApiDomainName:
    Type: 'AWS::ApiGateway::DomainName'
    Properties:
      CertificateArn: !Ref CertificateArn
      DomainName: !Sub "api.${DomainName}"
      EndpointConfiguration:
        Types:
          - 'EDGE'

  RestApiBasePathMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Properties:
      DomainName: !Ref RestApiDomainName
      RestApiId: !Ref RestApi
      Stage: !Ref ApiStageName

  # -----------------------------------------------------------
  # Route53 - DNS configuration
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_Route53.html
  # -----------------------------------------------------------
  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    DependsOn:
      - RestApiDomainName
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub 'api.${DomainName}'
      Type: A
      AliasTarget:
        DNSName: !GetAtt RestApiDomainName.DistributionDomainName
        HostedZoneId: !GetAtt RestApiDomainName.DistributionHostedZoneId
        # EvaluateTargetHealth: true

  # --------------------------------------------------------------------------
  # WAF for API Gateway and Cognito (must belong to same region and CloudFront's must be global)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-webacl.html#cfn-wafv2-webacl-scope
  # --------------------------------------------------------------------------
  ApiCognitoWaf:
    Type: 'AWS::WAFv2::WebACL'
    Properties:
      DefaultAction:
        Allow: {}
      Scope: 'REGIONAL'
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: 'Uc3DmpHubApiCognitoWafMetric'
      Rules:
        - Name: 'AWS-AWSManagedRulesAmazonIpReputationList'
          Priority: 0
          OverrideAction:
            Count: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: 'AWS-AWSManagedRulesAmazonIpReputationList'
          Statement:
            ManagedRuleGroupStatement:
              VendorName: 'AWS'
              Name: 'AWSManagedRulesAmazonIpReputationList'
              ExcludedRules: []
        - Name: 'AWS-AWSManagedRulesCommonRuleSet'
          Priority: 1
          OverrideAction:
            Count: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: 'AWS-AWSManagedRulesCommonRuleSet'
          Statement:
            ManagedRuleGroupStatement:
              VendorName: 'AWS'
              Name: 'AWSManagedRulesCommonRuleSet'
              ExcludedRules: []
        - Name: 'AWS-AWSManagedRulesKnownBadInputsRuleSet'
          Priority: 2
          OverrideAction:
            Count: {}
          VisibilityConfig:
            SampledRequestsEnabled: true
            CloudWatchMetricsEnabled: true
            MetricName: 'AWS-AWSManagedRulesKnownBadInputsRuleSet'
          Statement:
            ManagedRuleGroupStatement:
              VendorName: 'AWS'
              Name: 'AWSManagedRulesKnownBadInputsRuleSet'
              ExcludedRules: []

  # Attach WAF to API Gateway
  WafForApi:
    Type: 'AWS::WAFv2::WebACLAssociation'
    DependsOn:
      - RestApiStage
    Properties:
      WebACLArn: !GetAtt ApiCognitoWaf.Arn
      ResourceArn: !Join
        - ''
        - - 'arn:aws:apigateway:'
          - !Ref AWS::Region
          - '::/restapis/'
          - !Ref RestApi
          - '/stages/'
          - !Ref "ApiStageName"

  # TODO: Put this WAF in front of the Cognito auth methods
  #       Figure out if we need to define the link between our Cert and the API/Cognito

Outputs:
  RestApiId:
    Value: !Ref RestApi
  RestApiSystemsAuthorizerId:
    Value: !Ref SystemsAuthorizer
  RestApiDmpsResource:
    Value: !Ref DmpsResource
  RestApiStageId:
    Value: !Ref RestApiStage
  RestApiDistributionDomainName:
   Value: !GetAtt RestApiDomainName.DistributionDomainName

  DomainName:
    Value: !Ref DomainName
  ApiDomainName:
    Value: !Sub "api.${DomainName}"
  ApiArn:
    Value: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${RestApi}/stages/${ApiStageName}'

  {% for lambda_dict in imported.API_LAMBDAS %}
  {% if lambda_dict['api_method'] is defined %}
  {{lambda_dict['name']}}ApiMethodId:
    Value: !Ref {{lambda_dict['name']}}ApiMethod
  {% endif %}
  {% endfor %}

  ApiCognitoWafNameIdScope:
    Value: !Ref ApiCognitoWaf
  ApiCognitoWafId:
    Value: !GetAtt ApiCognitoWaf.Id
  ApiCognitoWafArn:
    Value: !GetAtt ApiCognitoWaf.Arn
  ApiCognitoWafLabelNamespace:
    Value: !GetAtt ApiCognitoWaf.LabelNamespace
