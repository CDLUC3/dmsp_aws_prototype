---
{% import 'includes.j2' as imported %}

AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: 'Code build and pipeline for the DMPHub Gems and Lambda functions'

Parameters:
  VpcID:
    Type: 'AWS::EC2::VPC::Id'
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'

  AppName:
    Type: String
  Environment:
    Type: String
    Default: 'dev'
  DomainName:
    Type: String

  CodeStarConnectionArn:
    Type: String
  RubyGemsApiKey:
    Type: String

  ECRRepositoryURI:
    Type: String
  ECRRepositoryName:
    Type: String

  DMPHubBranchToMonitor:
    Type: String
    Default: 'development'

  LambdaEnvironment:
    Type: String
    Default: 'dev'

  LambdaFunctionStackName:
    Type: 'String'

Resources:
  # -----------------------------------------------------------
  # Cloudwatch LogGroup for the Codepipeline
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
  # -----------------------------------------------------------
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30

  # -----------------------------------------------------------
  # S3 Bucket for the pipeline artifacts
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html
  # -----------------------------------------------------------
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: true

  # -----------------------------------------------------------
  # Identitity and Access Management (IAM)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_IAM.html
  # -----------------------------------------------------------
  IAMPipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'codepipeline.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub '${AppName}-pipline-policy'
          PolicyDocument: !Sub >
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": ["codestar-connections:UseConnection"],
                  "Resource": "${CodeStarConnectionArn}"
                }
              ]
            }
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSCodePipelineFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess'
        - 'arn:aws:iam::aws:policy/AWSCodeDeployDeployerAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'

  IAMCodeBuildRole:
    Type: 'AWS::IAM::Role'
    DependsOn:
      - S3Bucket
      - LogGroup
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'codebuild.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AWSLambda_FullAccess'
        - 'arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilderECRContainerBuilds'
      Policies:
        - PolicyName: !Sub '${AppName}-build-policy'
          PolicyDocument: !Sub >
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:AssociateKmsKey"
                  ],
                  "Resource": [
                    "${LogGroup.Arn}"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:PutMetricData"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*",
                    "ec2:CreateNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeDhcpOptions",
                    "ec2:DescribeVpcs",
                    "ec2:CreateNetworkInterfacePermission"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": ["codestar-connections:UseConnection"],
                  "Resource": "${CodeStarConnectionArn}"
                }
              ]
            }

  IAMCodeDeployRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'codedeploy.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess'

  # -----------------------------------------------------------
  # CodeBuild
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_CodeBuild.html
  # -----------------------------------------------------------
  CodeBuildSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AppName}-build-sec-grp'
      GroupDescription: !Sub '${AppName} CodeBuild SecurityGroup'
      VpcId: !Ref VpcID

  GemBuildProject:
    Type: 'AWS::CodeBuild::Project'
    DependsOn:
      - CodeBuildSecurityGroup
    Properties:
      ServiceRole: !GetAtt IAMCodeBuildRole.Arn
      Artifacts:
        Type: 'CODEPIPELINE'
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref LogGroup
          Status: 'ENABLED'
          StreamName: 'codebuild'
      Environment:
        Type: 'LINUX_CONTAINER'
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:4.0'
        # This is required in order for the Docker daemon to work!
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: 'LAMBDA_ENVIRONMENT'
            Value: !Ref LambdaEnvironment
          - Name: 'RUBYGEMS_API_KEY'
            Value: !Ref RubyGemsApiKey
      Source:
        Type: 'CODEPIPELINE'
        BuildSpec: 'buildspec.yaml'
      TimeoutInMinutes: 5
      VpcConfig:
        VpcId: !Ref VpcID
        Subnets: !Ref Subnets
        SecurityGroupIds:
          - !Ref CodeBuildSecurityGroup
      Cache:
        Type: 'S3'
        Location: !Sub '${S3Bucket}/build-cache'

  {% for lambda_dict in imported.LAMBDAS %}
  {{lambda_dict['name']}}BuildProject:
    Type: 'AWS::CodeBuild::Project'
    DependsOn:
      - CodeBuildSecurityGroup
    Properties:
      ServiceRole: !GetAtt IAMCodeBuildRole.Arn
      Artifacts:
        Type: 'CODEPIPELINE'
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref LogGroup
          Status: 'ENABLED'
          StreamName: 'codebuild-{{lambda_dict['tag']}}'
      Environment:
        Type: 'LINUX_CONTAINER'
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:4.0'
        # This is required in order for the Docker daemon to work!
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: 'LAMBDA_ENVIRONMENT'
            Value: !Ref LambdaEnvironment
          - Name: 'LAMBDA_NAME'
            Value: '{{lambda_dict['tag']}}'
          - Name: 'LAMBDA_ARN'
            Value: !ImportValue
              'Fn::Sub': '${LambdaFunctionStackName}-{{lambda_dict['name']}}FunctionArn'
          - Name: 'ECR_REPOSITORY_URI'
            Value: !Ref ECRRepositoryURI
          - Name: 'ECR_REPOSITORY_NAME'
            Value: !Ref ECRRepositoryName
      Source:
        Type: 'CODEPIPELINE'
        BuildSpec: 'buildspec.yaml'
      TimeoutInMinutes: 15
      VpcConfig:
        VpcId: !Ref VpcID
        Subnets: !Ref Subnets
        SecurityGroupIds:
          - !Ref CodeBuildSecurityGroup
      Cache:
        Type: 'S3'
        Location: !Sub '${S3Bucket}/build-cache'
  {% endfor %}

  # -----------------------------------------------------------
  # CodePipeline
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html
  # -----------------------------------------------------------
  Pipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    DependsOn:
      - IAMPipelineRole
      - GemBuildProject
      {% for lambda_dict in imported.LAMBDAS %}
      - {{lambda_dict['name']}}BuildProject
      {% endfor %}
    Properties:
      ArtifactStore:
        Location: !Ref S3Bucket
        # CloudFormation only supports S3 at the moment!
        Type: 'S3'
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt IAMPipelineRole.Arn
      Stages:
        - Name: 'MonitorRepos'
          Actions:
            # This action is triggered when the development branch of DMPRoadmap has a new commit
            # it's output is the commit hash
            - Name: 'dmphub-v2-gems'
              RunOrder: 1
              ActionTypeId:
                Category: 'Source'
                Owner: 'AWS'
                Provider: 'CodeStarSourceConnection'
                Version: '1'
              # See: https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodestarConnectionSource.html
              # for info on tying CodeBuild in
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: 'CDLUC3/dmphub-v2-gems'
                BranchName: !Ref DMPHubBranchToMonitor
                OutputArtifactFormat: 'CODEBUILD_CLONE_REF'
              OutputArtifacts:
                - Name: 'gems_commit'

            {% for lambda_dict in imported.LAMBDAS %}
            - Name: '{{lambda_dict['tag']}}'
              RunOrder: 1
              ActionTypeId:
                Category: 'Source'
                Owner: 'AWS'
                Provider: 'CodeStarSourceConnection'
                Version: '1'
              # See: https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodestarConnectionSource.html
              # for info on tying CodeBuild in
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: 'CDLUC3/dmphub-v2-{{lambda_dict['tag']}}-lambda'
                BranchName: !Ref DMPHubBranchToMonitor
                OutputArtifactFormat: 'CODEBUILD_CLONE_REF'
              OutputArtifacts:
                - Name: '{{lambda_dict['tag']}}-lambda_commit'

            {% endfor %}

        - Name: 'BuildGems'
          Actions:
            - Name: 'Build'
              RunOrder: 2
              ActionTypeId:
                Category: 'Build'
                Owner: 'AWS'
                Provider: 'CodeBuild'
                Version: '1'
              Configuration:
                ProjectName: !Ref GemBuildProject
                PrimarySource: 'gems_commit'
              InputArtifacts:
                - Name: 'gems_commit'

        - Name: 'BuildPublishLambdas'
          Actions:
            {% for lambda_dict in imported.LAMBDAS %}
            - Name: '{{lambda_dict['name']}}'
              RunOrder: 3
              ActionTypeId:
                Category: 'Build'
                Owner: 'AWS'
                Provider: 'CodeBuild'
                Version: '1'
              Configuration:
                ProjectName: !Ref {{lambda_dict['name']}}BuildProject
                PrimarySource: '{{lambda_dict['tag']}}-lambda_commit'
              InputArtifacts:
                - Name: '{{lambda_dict['tag']}}-lambda_commit'
              OutputArtifacts:
                - Name: '{{lambda_dict['tag']}}-image'
            {% endfor %}

Outputs:
  LogGroupId:
    Value: !Ref LogGroup
  LogGroupArn:
    Value: !GetAtt LogGroup.Arn

  PipelineRoleId:
    Value: !Ref IAMPipelineRole
  PipelineRoleArn:
    Value: !GetAtt IAMPipelineRole.Arn

  CodeBuildRoleId:
    Value: !Ref IAMCodeBuildRole
  CodeBuildRoleArn:
    Value: !GetAtt IAMCodeBuildRole.Arn

  S3BucketId:
    Value: !Ref S3Bucket
  S3BucketUri:
    Value: !Sub "s3://${S3Bucket}"
  S3BucketArn:
    Value: !GetAtt S3Bucket.Arn

  GemBuildProjectName:
    Value: !Ref GemBuildProject
  GemBuildProjectArn:
    Value: !GetAtt GemBuildProject.Arn

  {% for lambda_dict in imported.LAMBDAS %}
  {{lambda_dict['name']}}BuildProjectName:
    Value: !Ref {{lambda_dict['name']}}BuildProject
  {{lambda_dict['name']}}BuildProjectArn:
    Value: !GetAtt {{lambda_dict['name']}}BuildProject.Arn
  {% endfor %}

  PipelineId:
    Value: !Ref Pipeline
  PipelineVersion:
    Value: !GetAtt Pipeline.Version
