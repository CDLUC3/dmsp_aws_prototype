AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: 'Serverless architecture for the Apollo server system'

Parameters:
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'

  EcsClusterId:
    Type: 'String'

  EcsTaskExecutionRoleId:
    Type: 'String'

  EcsSecGrpId:
    Type: 'String'

  AlbSecGrpId:
    Type: 'String'

  Env:
    Type: 'String'
    Default: 'dev'

  AppName:
    Type: 'String'

  AppPort:
    Type: 'Number'

  EcsDesiredServiceCount:
    Type: 'Number'
    Default: 1

  EcrRepositoryUri:
    Type: 'String'

  EcrImageTag:
    Type: 'String'

  AlbTargetGroupArn:
    Type: 'String'

  CacheHost:
    Type: 'String'

  CachePort:
    Type: 'String'

  CacheConnectTimeout:
    Type: 'Number'
    Default: 10000 # 10 seconds

  CpuSize:
    Type: 'String'
    Default: '2048' # 2 vCPU

  MemorySize:
    Type: 'String'
    Default: '4096' # 4GB

  StartTimeout:
    Type: 'Number'
    Default: 30 # seconds

  HealthCheckGracePeriod:
    Type: 'Number'
    Default: 180 # seconds

  MinimumHealthyContainerPercentage:
    Type: 'Number'
    Default: 50

  MaximumHealthyContainerPercentage:
    Type: 'Number'
    Default: 150

  StopTimeout:
    Type: 'Number'
    Default: 30 # seconds

  LogLevel:
    Type: 'String'
    Default: 'warn'
    AllowedValues:
      - 'debug'
      - 'info'
      - 'warn'
      - 'error'

  CognitoClientId:
    Type: 'String'

  CognitoClientSecret:
    Type: 'String'

  DmpIdBaseUrl:
    Type: 'String'

  DmpIdShoulder:
    Type: 'String'

  RestDataSourceCacheTtl:
    Type: 'Number'
    Default: 180

  NodeEnv:
    Type: 'String'
    Default: 'development'

  BcryptSaltRounds:
    Type: 'Number'
    Default: 10

  HashTokenSecret:
    Type: 'String'

  RestDataSourceCacheTtl:
    Type: 'Number'
    Default: 180 # 2 minutes

  JwtSecret:
    Type: 'String'

  JwtTtl:
    Type: 'Number'
    Default: 600 # 10 minutes

  JwtRefreshSecret:
    Type: 'String'

  JwtRefreshTtl:
    Type: 'Number'
    Default: 86400 # 1 day

  CsrfLength:
    Type: 'Number'
    Default: 32

  CsrfTtl:
    Type: 'Number'
    Default: 3600 # 1 hour

  DbConnectionLimit:
    Type: 'Number'
    Default: 5

  DbHost:
    Type: 'String'

  DbPort:
    Type: 'String'
    Default: '3306'

  DbName:
    Type: 'String'
    Default: 'dmsp'

  DbUsername:
    Type: 'String'

  DbPassword:
    Type: 'String'

  HelpdeskEmail:
    Type: 'String'

  UseMockData:
    Type: 'String'
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

Conditions:
  IsDev:
    !Equals [!Ref Env, 'dev']

  IsSingleInstance:
    !Equals [!Ref EcsDesiredServiceCount, 1]

Resources:
  # -----------------------------------------------------------
  # Identitity and Access Management (IAM)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_IAM.html
  # -----------------------------------------------------------
  # Policy to allow SSM Session Manager to access our ECS containers
  SessionManagerPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 'ecs:ExecuteCommand'
            - 'ssmmessages:CreateControlChannel'
            - 'ssmmessages:CreateDataChannel'
            - 'ssmmessages:OpenControlChannel'
            - 'ssmmessages:OpenDataChannel'
          Resource: '*'
          Condition:
            StringEquals:
              "ecs:container-name": !Ref AppName

  # Role that grants our containers in the task permission to call AWS APIs
  EcsTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRDSDataFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSESFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonElastiCacheFullAccess'
        - !Ref SessionManagerPolicy

  # -----------------------------------------------------------
  # Elastic Container Service (ECS) - Containers that host the application
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_ECS.html
  # -----------------------------------------------------------
  EcsTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn:
      - EcsTaskRole
    Properties:
      Cpu: !Ref CpuSize
      Memory: !Ref MemorySize
      ExecutionRoleArn: !Ref EcsTaskExecutionRoleId
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      Family: !Sub '${AWS::StackName}-apollo-server'
      NetworkMode: 'awsvpc' # Required for Fargate!
      RuntimePlatform:
        CpuArchitecture: 'X86_64'
        OperatingSystemFamily: 'LINUX'
      RequiresCompatibilities:
        - 'FARGATE'
      ContainerDefinitions:
        - Image: !Sub "${EcrRepositoryUri}:${EcrImageTag}"
          DisableNetworking: false
          Essential: true
          Interactive: true
          Name: !Ref AppName
          StartTimeout: !Ref StartTimeout
          StopTimeout: !Ref StopTimeout
          # TODO: Figure out what container health check should be run (e.g. memory usage)
          # HealthCheck:
          #   Command:  ["CMD-SHELL", "echo hello"]
          #   Interval: 5
          #   Retries: 2
          #   Timeout: 3
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-create-group: true
              awslogs-group: !Ref AWS::StackName
              awslogs-stream-prefix: !Ref AppName
          PortMappings:
            # SES port (Email)
            - ContainerPort: 25
              Protocol: 'tcp'
            # ALB port (The port we are listening on)
            - ContainerPort: !Ref AppPort
              Protocol: 'tcp'
            # RDS port (The MySQL DB port)
            - ContainerPort: !Ref DbPort
              Protocol: 'tcp'
            # Redis port
            - ContainerPort: !Ref CachePort
              Protocol: 'tcp'
          Environment:
            - Name: 'NODE_ENV'
              Value: !Ref NodeEnv

            - Name: 'LOG_LEVEL'
              Value: !Ref LogLevel
            - Name: 'USE_MOCK_DATA'
              Value: !Ref UseMockData

            - Name: 'REST_DATA_SOURCE_CACHE_TTL'
              Value: !Ref RestDataSourceCacheTtl

            - Name: 'BCRYPT_SALT_ROUNDS'
              Value: !Ref BcryptSaltRounds
            - Name: 'TOKEN_HASH_SECRET'
              Value: !Ref HashTokenSecret

            - Name: 'JWT_SECRET'
              Value: !Ref JwtSecret
            - Name: 'JWT_TTL'
              Value: !Ref JwtTtl
            - Name: 'JWT_REFRESH_SECRET'
              Value: !Ref JwtRefreshSecret
            - Name: 'JWT_REFRESH_TTL'
              Value: !Ref JwtRefreshTtl

            - Name: 'CSRF_LENGTH'
              Value: !Ref CsrfLength
            - Name: 'CSRF_TTL'
              Value: !Ref CsrfTtl

            # Elasticache Redis connection
            - Name: 'CACHE_HOST'
              Value: !Ref CacheHost
            - Name: 'CACHE_PORT'
              Value: !Ref CachePort
            - Name: 'CACHE_CONNECT_TIMEOUT'
              Value: !Ref CacheConnectTimeout

            - Name: 'DMP_ID_BASE_URL'
              Value: !Ref DmpIdBaseUrl
            - Name: 'DMP_ID_SHOULDER'
              Value: !Ref DmpIdShoulder

            # DMPHub API connection
            - Name: 'DMPHUB_AUTH_URL'
              Value: !Sub "https://auth.dmphub.uc3${Env}.cdlib.net"
            - Name: 'DMPHUB_API_BASE_URL'
              Value: !Sub "https://api.dmphub.uc3${Env}.cdlib.net"
            - Name: 'DMPHUB_API_CLIENT_ID'
              Value: !Ref CognitoClientId
            - Name: 'DMPHUB_API_CLIENT_SECRET'
              Value: !Ref CognitoClientSecret

            # AWS RDS MySQL database
            - Name: 'MYSQL_CONNECTION_LIMIT'
              Value: !Ref DbConnectionLimit
            - Name: 'MYSQL_HOST'
              Value: !Ref DbHost
            - Name: 'MYSQL_PORT'
              Value: !Ref DbPort
            - Name: 'MYSQL_DATABASE'
              Value: !Ref DbName
            - Name: 'MYSQL_USER'
              Value: !Ref DbUsername
            - Name: 'MYSQL_PASSWORD'
              Value: !Ref DbPassword
            - Name: 'HELPDESK_EMAIL'
              Value: !Ref HelpdeskEmail

  # Container Service definition
  EcsService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - EcsTaskDefinition
    Properties:
      Cluster: !Ref EcsClusterId
      DesiredCount: !Ref EcsDesiredServiceCount
      EnableECSManagedTags: true
      EnableExecuteCommand: true # Allow session manager
      HealthCheckGracePeriodSeconds: !Ref HealthCheckGracePeriod
      LaunchType: 'FARGATE'
      DeploymentConfiguration:
        MaximumPercent: !Ref MaximumHealthyContainerPercentage
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        # If this is dev then just do a rolling deploy, otherwise use the blue/green strategy
        Type: !If
          - IsDev
          - 'ECS'
          - 'CODE_DEPLOY'
      LoadBalancers:
        - TargetGroupArn: !Ref AlbTargetGroupArn
          ContainerPort: !Ref AppPort
          ContainerName: !Ref AppName
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref EcsSecGrpId
            - !Ref AlbSecGrpId
          AssignPublicIp: 'ENABLED'
          Subnets: !Ref Subnets
      PlatformVersion: 'LATEST'
      PropagateTags: 'TASK_DEFINITION'
      SchedulingStrategy: 'REPLICA'
      TaskDefinition: !Ref EcsTaskDefinition

Outputs:
  EcsServiceArn:
    Value: !Ref EcsService

  EcsServiceName:
    Value: !GetAtt EcsService.Name

  EcsTaskId:
    Value: !Ref EcsTaskDefinition
