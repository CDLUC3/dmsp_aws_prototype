AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: 'Cognito resources for accessing the API'

Parameters:
  HostedZoneId:
    Type: 'String'

  CertificateArn:
    Type: 'String'

  NamePrefix:
    Type: 'String'

  Domain:
    Type: 'String'

  Subdomain:
    Type: 'String'

  Env:
    Type: 'String'
    Default: 'dev'

  DmptoolCallbackUri:
    Type: 'String'

Resources:
  # -----------------------------------------------------------
  # Cognito resources
  # -----------------------------------------------------------
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        UnusedAccountValidityDays: 7
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      Schema:
        - Name: 'email'
          Required: true
          Mutable: true
          DeveloperOnlyAttribute: false
          AttributeDataType: 'String'
          StringAttributeConstraints:
            MinLength: 0
            MaxLength: 2048
        - Name: 'email_verified'
          Required: false
          Mutable: true
          DeveloperOnlyAttribute: false
          AttributeDataType: 'Boolean'
      UsernameAttributes:
        - 'email'
      AutoVerifiedAttributes:
        - 'email'

  UserPoolDomain:
    Type: 'AWS::Cognito::UserPoolDomain'
    Properties:
      CustomDomainConfig:
        CertificateArn: !Ref CertificateArn
      Domain: !Sub "${Subdomain}-${Env}"
      UserPoolId: !Ref UserPool

  SystemsUserPool:
    Type: 'AWS::Cognito::UserPool'
    DeletionPolicy: Retain
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      # There's an open issue on this for AWS, but because this one is not named 'Tags' it doesn't inherit the stack tags
      UserPoolName: !Sub '${NamePrefix}-${Env}-UserPool'
      UserPoolTags:
        Program: 'uc3'
        Service: 'dmp'
        Subservice: 'hub'
        Environment: !Ref Env

  SystemsUserPoolResourceServer:
    Type: 'AWS::Cognito::UserPoolResourceServer'
    Properties:
      Name: !Sub '${NamePrefix}-${Env}-UserPoolResourceServer'
      Identifier: !Sub 'https://${Subdomain}-auth.${Domain}'
      UserPoolId: !Ref SystemsUserPool
      Scopes:
        - ScopeName: !Sub '${Env}.read'
          ScopeDescription: 'Allows access to the GET api endpoints (default) (e.g. getDmp, getDmps)'
        - ScopeName: !Sub '${Env}.write'
          ScopeDescription: 'Allows access to POST, PUT and DELETE for DMPs (e.g. postDmp, putDmp, deleteDmp)'

  # Add the DMPTool as an initial client (not sure if we want to do this long term, probably better to retain the pool)
  DmptoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    # DependsOn:
    #   - SystemsUserPoolResourceServer
    DeletionPolicy: Retain
    Properties:
      ClientName: 'dmptool'
      UserPoolId: !Ref SystemsUserPool
      ExplicitAuthFlows:
        - 'ALLOW_ADMIN_USER_PASSWORD_AUTH'
        - 'ALLOW_CUSTOM_AUTH'
        - 'ALLOW_USER_SRP_AUTH'
        - 'ALLOW_REFRESH_TOKEN_AUTH'
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - 'client_credentials'
      AllowedOAuthScopes:
        - !Sub 'https://${Subdomain}-auth.${Domain}/${Env}.read'
        - !Sub 'https://${Subdomain}-auth.${Domain}/${Env}.write'
      EnableTokenRevocation: true
      PreventUserExistenceErrors: 'ENABLED'
      GenerateSecret: true
      SupportedIdentityProviders:
        - 'COGNITO'
      # The CF docs indicate that this is not required but I am unable to get a token from Cognito without it
      CallbackURLs:
        - 'http://localhost:3000/callback'
        - !Ref DmptoolCallbackUri

  # DMPHub client used by the ALB to communicate with Cognito
  DmphubClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: 'dmphub'
      SupportedIdentityProviders:
        - 'COGNITO'
      AllowedOAuthFlowsUserPoolClient:  true
      AllowedOAuthScopes:
        - 'openid'
        - 'email'
      AllowedOAuthFlows:
        - 'code'
        - 'implicit'
      CallbackURLs:
        - !Sub "https://${Subdomain}.${Domain}/oauth2/idpresponse"
      GenerateSecret: true
      RefreshTokenValidity: 7

  # -----------------------------------------------------------
  # Route53 - DNS configuration
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_Route53.html
  # -----------------------------------------------------------
  # Route53RecordSet:
  #   Type: AWS::Route53::RecordSet
  #   DependsOn:
  #     - SystemsUserPoolResourceServer
  #   Properties:
  #     HostedZoneId: !Ref HostedZoneId
  #     Name: !Sub 'auth.${DomainName}'
  #     Type: A
  #     AliasTarget:
  #       DNSName: 'd3exb48yfsh0pg.cloudfront.net' # !GetAtt SystemsUserPool.ProviderURL
  #       HostedZoneId: 'Z2FDTNDATAQYW2'

Outputs:
  AuthDomainName:
    Value: !Sub "${Subdomain}-${Env}.auth.${AWS::Region}.amazoncognito.com"

  UserPoolId:
    Value: !Ref UserPool
  UserPoolArn:
    Value: !GetAtt UserPool.Arn
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolArn'

  SystemsUserPoolId:
    Value: !Ref SystemsUserPool
  SystemsUserPoolArn:
    Value: !GetAtt SystemsUserPool.Arn
    Export:
      Name: !Sub '${AWS::StackName}-SystemsUserPoolArn'
  # SystemsUserPoolResourceServerId:
  #   Value: !Ref SystemsUserPoolResourceServer
