AWSTemplateFormatVersion: '2010-09-09'

Description: 'Cognito resources for accessing the API'

Parameters:
  HostedZoneId:
    Type: 'String'

  CertificateArn:
    Type: 'String'

  Domain:
    Type: 'String'

  Subdomain:
    Type: 'String'

  Env:
    Type: 'String'
    Default: 'dev'

  TagProgram:
    Type: 'String'
    Default: 'uc3'

  TagService:
    Type: 'String'
    Default: 'dmp'

  TagSubservice:
    Type: 'String'
    Default: 'hub'

  TagCodeRepo:
    Type: 'String'

  TagContact:
    Type: 'String'

  OnlyAllowAdminsToCreateUsers:
    Type: 'String'
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

  UnusedAccountValidityDays:
    Type: 'Number'
    Default: 14

  MinimumPasswordLength:
    Type: 'Number'
    Default: 8

  DmptoolClientName:
    Type: 'String'

  DmptoolCallbackUri:
    Type: 'String'

  DmspUiCallbackUrls:
    Type: 'List<String>'

  DmspLogoutUrls:
    Type: 'List<String>'

  TokenValidityUnits:
    Type: 'String'
    Default: 'minutes'
    AllowedValues:
      - 'seconds'
      - 'minutes'
      - 'hours'
      - 'days'

  AccessTokenValidity:
    Type: 'Number'
    Default: 10

  AuthSessionValidatyMinutes:
    Type: 'Number'
    Default: 3

  IdTokenValidity:
    Type: 'Number'
    Default: 7

  RefreshTokenValidity:
    Type: 'Number'
    Default: 10080 # 7 days

Resources:
  # This file contains instructions for creating the UserPool that will be used by the UI to manage
  # user accounts.

  # See the following for example of hooking an ALB up to Cognito
  #   https://www.kdgregory.com/index.php?page=aws.albCognito
  #   https://www.kdgregory.com/misc/aws.albCognito/examples/template.yml

  # -----------------------------------------------------------
  # Cognito resources
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_Cognito.html
  # -----------------------------------------------------------
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    DeletionPolicy: 'Retain'
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-user-pool"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: !Ref OnlyAllowAdminsToCreateUsers
        UnusedAccountValidityDays: !Ref UnusedAccountValidityDays
      AutoVerifiedAttributes:
        - 'email'
      EmailConfiguration:
        # TODO: Consider switching this if we setup SES
        EmailSendingAccount: 'COGNITO_DEFAULT'
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: !Ref MinimumPasswordLength
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      Schema:
        - Name: 'first_name'
          Required: false
          Mutable: true
          DeveloperOnlyAttribute: false
          AttributeDataType: 'String'
          StringAttributeConstraints:
            MinLength: 2
            MaxLength: 64
        - Name: 'last_name'
          Required: false
          Mutable: true
          DeveloperOnlyAttribute: false
          AttributeDataType: 'String'
          StringAttributeConstraints:
            MinLength: 2
            MaxLength: 64
        - Name: 'email'
          Required: true
          Mutable: true
          DeveloperOnlyAttribute: false
          AttributeDataType: 'String'
          StringAttributeConstraints:
            MinLength: 3
            MaxLength: 2048
        - Name: 'email_verified'
          Required: false
          Mutable: true
          DeveloperOnlyAttribute: false
          AttributeDataType: 'Boolean'
      UsernameAttributes:
        - 'email'
      # For some reason Sceptre doesn't auto-create tags for this resource type.
      # AWS docs say this should be JSON, but this is all that works!
      UserPoolTags:
        Program: !Ref TagProgram
        Service: !Ref TagService
        Subservice: !Ref TagSubservice
        Environment: !Ref Env
        CodeRepo: !Ref TagCodeRepo
        Contact: !Ref TagContact

  UserPoolResourceServer:
    Type: 'AWS::Cognito::UserPoolResourceServer'
    Properties:
      Name: !Sub '${AWS::StackName}-UserPoolResourceServer'
      Identifier: !Sub 'https://${Subdomain}.${Domain}'
      # Identifier: !Sub "https://${Subdomain}.${Domain}"
      UserPoolId: !Ref UserPool
      Scopes:
        - ScopeName: !Sub '${Env}.delete'
          ScopeDescription: 'Allows access to the DELETE DMP api endpoint'
        - ScopeName: !Sub '${Env}.read'
          ScopeDescription: 'Allows access to the GET api endpoints (default) (e.g. getDmp, getDmps)'
        - ScopeName: !Sub '${Env}.upload'
          ScopeDescription: 'Allows access to the POST api endpoint for uploading PDF narratives'
        - ScopeName: !Sub '${Env}.write'
          ScopeDescription: 'Allows access to POST, PUT for DMPs (e.g. postDmp, putDmp, deleteDmp)'

  UserPoolDomain:
    Type: 'AWS::Cognito::UserPoolDomain'
    Properties:
      CustomDomainConfig:
        CertificateArn: !Ref CertificateArn
      Domain: !Sub "${Subdomain}.${Domain}"
      UserPoolId: !Ref UserPool

  # --------------------------------------------------------------
  # Cognito Identity Pool
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-identitypool.html#aws-resource-cognito-identitypool
  # --------------------------------------------------------------
  IdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    DeletionPolicy: 'Retain'
    Properties:
      IdentityPoolName: !Sub "${AWS::StackName}-identity-pool"
      AllowUnauthenticatedIdentities: true

  # --------------------------------------------------------------
  # IAM Roles for Cognito Identities
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-role.html
  # --------------------------------------------------------------
  # Role given to OpenSearch so that it can access Cognito
  OpenSearchCognitoRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'DmpHub${Env}CognitoAccessForOpenSearch'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'es.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonOpenSearchServiceCognitoAccess'

  # --------------------------------------------------------------
  # Cognito UserPool application clients
  #   See:
  # --------------------------------------------------------------
  # Add the client for the DMPTool
  DmptoolUserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    DeletionPolicy: Retain
    DependsOn: UserPoolResourceServer
    Properties:
      ClientName: !Ref DmptoolClientName
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - 'ALLOW_ADMIN_USER_PASSWORD_AUTH'
        - 'ALLOW_CUSTOM_AUTH'
        - 'ALLOW_USER_SRP_AUTH'
        - 'ALLOW_REFRESH_TOKEN_AUTH'
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - 'client_credentials'
      AllowedOAuthScopes:
        - !Sub 'https://${Subdomain}.${Domain}/${Env}.read'
        - !Sub 'https://${Subdomain}.${Domain}/${Env}.write'
      EnableTokenRevocation: true
      PreventUserExistenceErrors: 'ENABLED'
      GenerateSecret: true
      SupportedIdentityProviders:
        - 'COGNITO'
      # The CF docs indicate that this is not required but I am unable to get a token from Cognito without it
      CallbackURLs:
        # - 'http://localhost:3000/callback'
        - !Ref DmptoolCallbackUri
      TokenValidityUnits:
        AccessToken: !Ref TokenValidityUnits
        IdToken: !Ref TokenValidityUnits
        RefreshToken: !Ref TokenValidityUnits
      # The token issued after the user signs in
      AccessTokenValidity: !Ref AccessTokenValidity
      # The length (minutes) that a session token for each API request in an authentication flow lasts
      AuthSessionValidity: !Ref AuthSessionValidatyMinutes
      # The token used during user authentication
      IdTokenValidity: !Ref IdTokenValidity
      # The length of time the user can refresh their token
      RefreshTokenValidity: !Ref RefreshTokenValidity

  # Add the client for the new React pages of the DMPTool
  UiUserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    DeletionPolicy: Retain
    Properties:
      ClientName: 'dmphub'
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - 'ALLOW_ADMIN_USER_PASSWORD_AUTH'
        - 'ALLOW_CUSTOM_AUTH'
        - 'ALLOW_USER_SRP_AUTH'
        - 'ALLOW_REFRESH_TOKEN_AUTH'
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - 'client_credentials'
      AllowedOAuthScopes:
        - !Sub 'https://${Subdomain}.${Domain}/${Env}.delete'
        - !Sub 'https://${Subdomain}.${Domain}/${Env}.read'
        - !Sub 'https://${Subdomain}.${Domain}/${Env}.upload'
        - !Sub 'https://${Subdomain}.${Domain}/${Env}.write'
      EnableTokenRevocation: true
      PreventUserExistenceErrors: 'ENABLED'
      GenerateSecret: true
      SupportedIdentityProviders:
        - 'COGNITO'
      # The CF docs indicate that this is not required but I am unable to get a token from Cognito without it
      CallbackURLs:
        - 'http://localhost:3000/callback'
        - !Sub "https://${UserPoolDomain}/oauth2/idpresponse"
      TokenValidityUnits:
        AccessToken: !Ref TokenValidityUnits
        IdToken: !Ref TokenValidityUnits
        RefreshToken: !Ref TokenValidityUnits
      # The token issued after the user signs in
      AccessTokenValidity: !Ref AccessTokenValidity
      # The length (minutes) that a session token for each API request in an authentication flow lasts
      AuthSessionValidity: !Ref AuthSessionValidatyMinutes
      # The token used during user authentication
      IdTokenValidity: !Ref IdTokenValidity
      # The length of time the user can refresh their token
      RefreshTokenValidity: !Ref RefreshTokenValidity

  # New ReactJS UI Client
  #    WARNING: Changes to this Client may result in a new Client Id/Secret. If so, you will need to
  #             update the SSM params in `/uc3/dmp/hub/${Env}/DmspClient[Id/Secret]`
  #             You will also need to inform the ReactJS admin of the change.
  DmspUserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    #DeletionPolicy: Retain
    Properties:
      ClientName: !Sub '${AWS::StackName}-dmsp-ui'
      UserPoolId: !Ref UserPool
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - 'code'
      AllowedOAuthScopes:
        - 'email'
        - 'openid'
      CallbackURLs: !Ref DmspUiCallbackUrls
      LogoutURLs: !Ref DmspLogoutUrls
      SupportedIdentityProviders:
        - 'COGNITO'

  # -----------------------------------------------------------
  # Route53 - DNS configuration
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_Route53.html
  # -----------------------------------------------------------
  RecordSet:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub "${Subdomain}.${Domain}"
      Type: 'A'
      AliasTarget:
        DNSName: !GetAtt UserPoolDomain.CloudFrontDistribution
        HostedZoneId: 'Z2FDTNDATAQYW2' # !Ref HostedZoneId

Outputs:
  UserPoolDomain:
    Value: !Sub "${Subdomain}.${Domain}"

  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: !Sub "${Env}-UserPoolId"

  UserPoolResourceServerId:
    Value: !Ref UserPoolResourceServer

  UserPoolArn:
    Value: !GetAtt UserPool.Arn
    Export:
      Name: !Sub '${Env}-CognitoUserPoolArn'

  DmspUserPoolClientId:
    Value: !Ref DmspUserPoolClient

  DmspUserPoolClientSecret:
    Value: !GetAtt DmspUserPoolClient.ClientSecret

  # DmspUserPoolclientUrl:
  #   Value: !Sub 'https://${Subdomain}.${Domain}.${AWS::Region}.amazoncognito.com/login?response_type=code&client_id=${DmspUserPoolClient}&redirect_uri=${DmspUiRedirectUrl}'
