AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: 'Cognito resources for accessing the API'

Parameters:
  HostedZoneId:
    Type: 'String'

  CertificateArn:
    Type: 'String'

  Domain:
    Type: 'String'

  Subdomain:
    Type: 'String'

  Env:
    Type: 'String'

  SsmPath:
    Type: 'String'

  OnlyAllowAdminsToCreateUsers:
    Type: 'String'
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'

  UnusedAccountValidityDays:
    Type: 'Number'
    Default: 14

  MinimumPasswordLength:
    Type: 'Number'
    Default: 8

Resources:
  # This file contains instructions for creating the UserPool that will be used by the UI to manage
  # user accounts.

  # See the following for example of hooking an ALB up to Cognito
  #   https://www.kdgregory.com/index.php?page=aws.albCognito
  #   https://www.kdgregory.com/misc/aws.albCognito/examples/template.yml

  # -----------------------------------------------------------
  # Cognito resources
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_Cognito.html
  # -----------------------------------------------------------
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    # DeletionPolicy: Retain
    Properties:
      UserPoolName: !Sub "${AWS::StackName}-user-pool"
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: !Ref OnlyAllowAdminsToCreateUsers
        UnusedAccountValidityDays: !Ref UnusedAccountValidityDays
      AutoVerifiedAttributes:
        - 'email'
      EmailConfiguration:
        # TODO: Consider switching this if we setup SES
        EmailSendingAccount: 'COGNITO_DEFAULT'
      MfaConfiguration: 'OFF'
      Policies:
        PasswordPolicy:
          MinimumLength: !Ref MinimumPasswordLength
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
      Schema:
        - Name: 'first_name'
          Required: false
          Mutable: true
          DeveloperOnlyAttribute: false
          AttributeDataType: 'String'
          StringAttributeConstraints:
            MinLength: 2
            MaxLength: 64
        - Name: 'last_name'
          Required: false
          Mutable: true
          DeveloperOnlyAttribute: false
          AttributeDataType: 'String'
          StringAttributeConstraints:
            MinLength: 2
            MaxLength: 64
        - Name: 'email'
          Required: true
          Mutable: true
          DeveloperOnlyAttribute: false
          AttributeDataType: 'String'
          StringAttributeConstraints:
            MinLength: 3
            MaxLength: 2048
        - Name: 'email_verified'
          Required: false
          Mutable: true
          DeveloperOnlyAttribute: false
          AttributeDataType: 'Boolean'
      UsernameAttributes:
        - 'email'

  UserPoolResourceServer:
    Type: 'AWS::Cognito::UserPoolResourceServer'
    Properties:
      Name: !Sub '${AWS::StackName}-UserPoolResourceServer'
      Identifier: !Sub 'https://${Subdomain}.${Domain}'
      # Identifier: !Sub "https://${Subdomain}.${Domain}"
      UserPoolId: !Ref UserPool
      Scopes:
        - ScopeName: !Sub '${Env}.read'
          ScopeDescription: 'Allows access to the GET api endpoints (default) (e.g. getDmp, getDmps)'
        - ScopeName: !Sub '${Env}.write'
          ScopeDescription: 'Allows access to POST, PUT and DELETE for DMPs (e.g. postDmp, putDmp, deleteDmp)'

  UserPoolDomain:
    Type: 'AWS::Cognito::UserPoolDomain'
    Properties:
      CustomDomainConfig:
        CertificateArn: !Ref CertificateArn
      Domain: !Sub "${Subdomain}.${Domain}"
      UserPoolId: !Ref UserPool

  # ----------------------------------------------
  # SSM Parameter Store
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-parameter.html
  # ----------------------------------------------
  # Add the Systems UserPool ARN to SSM so that our Lambdas can access it
  UserPoolArnParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "${AWS::StackName} Cognito UserPool"
      Name: !Sub "${SsmPath}UserPoolArn"
      # Note: AWS CloudFormation does not yet support creating a SecureString parameter type.
      Type: 'String'
      Value: !GetAtt UserPool.Arn

  # -----------------------------------------------------------
  # Route53 - DNS configuration
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_Route53.html
  # -----------------------------------------------------------
  RecordSet:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub "${Subdomain}.${Domain}"
      Type: 'A'
      AliasTarget:
        DNSName: !GetAtt UserPoolDomain.CloudFrontDistribution
        HostedZoneId: 'Z2FDTNDATAQYW2' # !Ref HostedZoneId

Outputs:
  UserPoolDomain:
    Value: !Sub "${Subdomain}.${Domain}"

  UserPoolId:
    Value: !Ref UserPool

  UserPoolResourceServerId:
    Value: !Ref UserPoolResourceServer

  UserPoolArn:
    Value: !GetAtt UserPool.Arn
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolArn'
