AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: 'Application load balancer for Fargate'

Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'

  Subdomain:
    Type: 'String'
  Env:
    Type: 'String'
    Default: 'dev'

  CertificateArn:
    Type: 'String'
  WafArn:
    Type: 'String'

Resources:
  # -----------------------------------------------------------
  # Elastic Load Balancer (ELB) Target Group
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_ElasticLoadBalancingV2.html
  # -----------------------------------------------------------
  AlbTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 300 # 5 minutes
      HealthCheckPath: '/'
      HealthCheckPort: 'traffic-port'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 30
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200
      VpcId: !Ref VpcId
      Port: 80
      Protocol: 'HTTP'
      TargetGroupAttributes:
        - Key: 'stickiness.enabled'
          Value: true
        - Key: 'stickiness.type'
          Value: 'lb_cookie'
        - Key: 'stickiness.lb_cookie.duration_seconds'
          Value: 900 # 15 minutes
      TargetType: 'ip'

  # -----------------------------------------------------------
  # Elastic Load Balancer (ELB)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
  # -----------------------------------------------------------
  Alb:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: 'application'
      Scheme: 'internet-facing'
      SecurityGroups:
        - !GetAtt AlbSecurityGroup.GroupId
      Subnets: !Ref Subnets

  # -----------------------------------------------------------
  # EC2 ALB Listeners
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
  # -----------------------------------------------------------
   # Listener that redirects all HTTP traffic to HTTPS
  AlbListenerHttp:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref Alb
      DefaultActions:
        - Type: 'redirect'
          RedirectConfig:
            Protocol: 'HTTPS'
            Port: 443
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: 'HTTP_301'
      Protocol: 'HTTP'
      Port: 80

  # HTTPS Listener for HTTPS that sends traffic to the ALB target (ECS) over HTTP
  AlbListenerHttps:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref Alb
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref AlbTargetGroup
      Protocol: 'HTTPS'
      Port: 443
      Certificates:
        - CertificateArn: !Ref CertificateArn

  # CognitoListenerRule:
  #   Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
  #   Properties:
  #     Actions:
  #       - Type: 'authenticate-cognito'
  #         AuthenticateCognitoConfig:
  #           UserPoolArn: CognitoUserPoolArn
  #           UserPoolClientId: CognitoUserPoolClient
  #           UserPoolDomain: CognitoUserPoolDomain
  #     Conditions:
  #       - Field: 'path-pattern'
  #         PathPatternConfig:
  #           Values:
  #             - 'auth'
  #     ListenerArn: !Ref AlbListenerHttps
  #     Priority: 1

  # Need some new Listener Rules attached to AlbListenerHttps
  #   https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listenerrule.html

  # Send default traffic to the API

  # Send '/auth' traffic to Cognito

  # Send '/dmps/{dmp_id+}' landing page traffic to the new React app
  # Send '/dmps/upload' upload page traffic to the new React app
  # Send '/dashboard' dashboard page traffic to the new React app
  # -----------------------------------------------------------
  # EC2 Security Groups for ECS containers
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  # -----------------------------------------------------------
  AlbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub 'Fargate security group for ${Subdomain}-${Env}'
      GroupName: !Sub '${Subdomain}-alb-sec'
      VpcId: !Ref VpcId

  # The ALB will terminate the SSL, so only accept 443 here
  AlbSecurityGroupIngressHttps:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn:
      - AlbSecurityGroup
    Properties:
      IpProtocol: 'tcp'
      FromPort: 443
      ToPort: 443
      CidrIp: '0.0.0.0/0'
      GroupId: !GetAtt AlbSecurityGroup.GroupId

  # -----------------------------------------------------------
  # Elastic Load Balancer (ELB) - Web Application Firewall (WAF) association
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-webaclassociation.html
  # -----------------------------------------------------------
  WafAlbAssociation:
    Type: 'AWS::WAFv2::WebACLAssociation'
    Properties:
      WebACLArn: !Ref WafArn
      ResourceArn: !Ref Alb

Outputs:
  AlbTargetGroupArn:
    Value: !Ref AlbTargetGroup
  AlbTargetGroupFullName:
    Value: !GetAtt AlbTargetGroup.TargetGroupFullName

  AlbArn:
    Value: !Ref Alb
  AlbFullName:
    Value: !GetAtt Alb.LoadBalancerFullName
  AlbDnsName:
    Value: !GetAtt Alb.DNSName
  AlbHostedZoneId:
    Value: !GetAtt Alb.CanonicalHostedZoneID

  AlbSecurityGroupID:
    Value: !GetAtt AlbSecurityGroup.GroupId
