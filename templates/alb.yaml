AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: 'Application load balancer for the DMPTool ECS instances'

Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'

  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'

  HostedZoneId:
    Type: 'AWS::Route53::HostedZone::Id'

  CertificateArn:
    Type: 'String'

  WafArn:
    Type: 'String'

  S3LogBucketId:
    Type: 'String'

  S3LogBucketArn:
    Type: 'String'

  AccessLogPrefix:
    Type: 'String'
    Default: 'alb-access'

  AppName:
    Type: 'String'
  Environment:
    Type: String
    Default: 'dev'

  Domain:
    Type: 'String'

  Subdomain:
    Type: 'String'

Resources:
  # -----------------------------------------------------------
  # EC2 Security Groups for ECS containers (see their definitions in application.yaml)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  # -----------------------------------------------------------
  AlbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub 'Fargate security group for ${AWS::StackName}'
      GroupName: !Sub '${AWS::StackName}-alb-sec'
      VpcId: !Ref VpcId

  # Allow HTTP traffic to the ALB
  AlbSecurityGroupIngressHttp:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn:
      - AlbSecurityGroup
    Properties:
      IpProtocol: 'tcp'
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
      GroupId: !GetAtt AlbSecurityGroup.GroupId

  # Allow HTTPS traffic to the ALB
  AlbSecurityGroupIngressHttps:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn:
      - AlbSecurityGroup
    Properties:
      IpProtocol: 'tcp'
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
      GroupId: !GetAtt AlbSecurityGroup.GroupId

  # -----------------------------------------------------------
  # Elastic Load Balancer (ELB) - Handles which container receives traffic
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_ElasticLoadBalancingV2.html
  # -----------------------------------------------------------
  ApolloServerTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 120 # 300 # 5 minutes
      HealthCheckPath: '/up'
      HealthCheckPort: 'traffic-port'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      UnhealthyThresholdCount: 3
      Matcher:
        # TODO: For some reason the Healthcheck is returning a 301 instead of 200
        #       so expanding this to allow for that. When you hit the path from a
        #       browser or curl though it returns a 200
        HttpCode: '200-399'
      VpcId: !Ref VpcId
      Port: 4000
      Protocol: 'HTTP'
      # TargetGroupAttributes:
      #   - Key: 'stickiness.enabled'
      #     Value: true
      #   - Key: 'stickiness.type'
      #     Value: 'lb_cookie'
      #   - Key: 'stickiness.lb_cookie.duration_seconds'
      #     Value: 300 # 900 # 15 minutes
      TargetType: 'ip'

  NextJsServerTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 120 # 300 # 5 minutes
      HealthCheckPath: '/healthcheck'
      HealthCheckPort: 'traffic-port'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 60
      UnhealthyThresholdCount: 2 # 3
      Matcher:
        # TODO: For some reason the Healthcheck is returning a 301 instead of 200
        #       so expanding this to allow for that. When you hit the path from a
        #       browser or curl though it returns a 200
        HttpCode: '200-399'
      VpcId: !Ref VpcId
      Port: 3000
      Protocol: 'HTTP'
      # TargetGroupAttributes:
      #   - Key: 'stickiness.enabled'
      #     Value: true
      #   - Key: 'stickiness.type'
      #     Value: 'lb_cookie'
      #   - Key: 'stickiness.lb_cookie.duration_seconds'
      #     Value: 300 # 900 # 15 minutes
      TargetType: 'ip'

  # The Application Load Balancer
  Alb:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn:
      - AlbToS3IamPolicy
    Properties:
      Type: 'application'
      Scheme: 'internet-facing'
      SecurityGroups:
        - !GetAtt AlbSecurityGroup.GroupId
      Subnets: !Ref Subnets
      LoadBalancerAttributes:
        - Key: 'access_logs.s3.enabled'
          Value: true
        - Key: 'access_logs.s3.bucket'
          Value: !Ref S3LogBucketId
        - Key: 'access_logs.s3.prefix'
          Value: !Sub '${AccessLogPrefix}'

  # Policy needed to allow ALB to write it's access logs to the S3Bucket
  AlbToS3IamPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref S3LogBucketId
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 'AllowAlbAccessLogWrite'
            Effect: 'Allow'
            Action: 's3:putObject'
            Principal:
              # This hard-coded ELB account id is required for us-west-2
              # see: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/enable-access-logging.html
              AWS: 'arn:aws:iam::797873946194:root'
            Resource: !Sub 'arn:aws:s3:::${S3LogBucketId}/${AccessLogPrefix}/AWSLogs/${AWS::AccountId}/*'

  # Listener that redirects all HTTP traffic to HTTPS
  AlbListenerHttp:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref Alb
      Protocol: 'HTTP'
      Port: 80
      DefaultActions:
        - Type: 'redirect'
          RedirectConfig:
            Protocol: 'HTTPS'
            Port: 443
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: 'HTTP_301'

  # HTTPS Listener that sends traffic to the nextJS frontend by default
  AlbListenerHttps:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref Alb
      Protocol: 'HTTPS'
      Port: 443
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref NextJsServerTargetGroup
          Order: 3

  # Listener rule to send traffic to certain paths to the Apollo server backend
  ApolloServerListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: 'forward'
          TargetGroupArn: !Ref ApolloServerTargetGroup
      Conditions:
        - Field: 'path-pattern'
          PathPatternConfig:
            Values:
              # GraphQL endpoints (only 5 allowed in one Rule)
              - '/graphql'
              - '/apollo-refresh'
              - '/apollo-signin'
              - '/apollo-signout'
              - '/apollo-signup'
      ListenerArn: !GetAtt AlbListenerHttps.ListenerArn
      Priority: 1

  # Listener rule to send traffic to certain paths to the Apollo server backend
  ApolloServerListenerRule2:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: 'forward'
          TargetGroupArn: !Ref ApolloServerTargetGroup
      Conditions:
        - Field: 'path-pattern'
          PathPatternConfig:
            Values:
              # GraphQL endpoints continued (only 5 allowed in one Rule)
              - '/up'
              - '/apollo-csrf'
      ListenerArn: !GetAtt AlbListenerHttps.ListenerArn
      Priority: 5 # Big jump here. CF won't allow you to reorder and add additional at the same time

  # Listener rule to send traffic to certain paths to the Apollo server backend
  NextJsServerListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: 'forward'
          TargetGroupArn: !Ref NextJsServerTargetGroup
      Conditions:
        - Field: 'path-pattern'
          PathPatternConfig:
            Values:
              - '/healthcheck'
      ListenerArn: !GetAtt AlbListenerHttps.ListenerArn
      Priority: 10 # Big jump here. CF won't allow you to reorder and add additional at the same time

  # TODO: Add the listener rule to send traffic to Shibboleth

  AlbWafAssocation:
    Type: 'AWS::WAFv2::WebACLAssociation'
    DependsOn:
    - Alb
    Properties:
      WebACLArn: !Ref WafArn
      ResourceArn: !Ref Alb

Outputs:
  ApolloServerTargetGroupArn:
    Value: !Ref ApolloServerTargetGroup

  ApolloServerTargetGroupFullName:
    Value: !GetAtt ApolloServerTargetGroup.TargetGroupFullName

  NextJsServerTargetGroupArn:
    Value: !Ref NextJsServerTargetGroup

  NextJsServerTargetGroupFullName:
    Value: !GetAtt NextJsServerTargetGroup.TargetGroupFullName

  AlbArn:
    Value: !Ref Alb

  AlbCanonicalHostedZoneId:
    Value: !GetAtt Alb.CanonicalHostedZoneID

  AlbFullName:
    Value: !GetAtt Alb.LoadBalancerFullName

  AlbDnsName:
    Value: !GetAtt Alb.DNSName

  AlbSecurityGroupId:
    Value: !GetAtt AlbSecurityGroup.GroupId

  AlbListenerHttpId:
    Value: !Ref AlbListenerHttp

  AlbListenerHttpsId:
    Value: !Ref AlbListenerHttps
