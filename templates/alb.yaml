AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: 'Application load balancer for Fargate'

Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'

  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'

  CertificateArn:
    Type: 'String'

  WafArn:
    Type: 'String'

  ElbType:
    Type: 'String'
    Default: 'application'
    AllowedValues:
      - 'application'
      - 'gateway'
      - 'network'

  ElbScheme:
    Type: 'String'
    Default: 'internet-facing'
    AllowedValues:
      - 'internal'
      - 'internet-facing'

  ElbTgPort:
    Type: 'Number'
    Default: 80

  ElbTgProtocol:
    Type: 'String'
    Default: 'HTTP'
    AllowedValues:
      - 'HTTP'
      - 'HTTPS'

  ElbTgTargetType:
    Type: 'String'
    Default: 'ip'
    AllowedValues:
      - 'alb'
      - 'instance'
      - 'ip'
      - 'lambda'

  ElbTgMatcherHttpCode:
    Type: 'Number'
    Default: 200

  ElbTgSessionStickinessSeconds:
    Type: 'Number'
    Default: 900 # 15 minutes

  ElbTgHealthCheckIntervalSeconds:
    Type: 'Number'
    Default: 300 # 5 minutes

  ElbTgHealthCheckPort:
    Type: 'Number'
    Default: 80

  ElbTgHealthCheckPath:
    Type: 'String'
    Default: '/'

  ElbTgHealthCheckProtocol:
    Type: 'String'
    Default: 'HTTP'
    AllowedValues:
      - 'HTTP'
      - 'HTTPS'

  ElbTgHealthCheckTimeoutSeconds:
    Type: 'Number'
    Default: 30

  ElbTgHealthCheckThresholdCount:
    Type: 'Number'
    Default: 3

Resources:
  # -----------------------------------------------------------
  # Elastic Load Balancer (ELB) Target Group
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_ElasticLoadBalancingV2.html
  # -----------------------------------------------------------
  AlbTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: !Ref ElbTgHealthCheckIntervalSeconds
      HealthCheckPath: !Ref ElbTgHealthCheckPath
      HealthCheckPort: !Ref ElbTgHealthCheckPort
      HealthCheckProtocol: !Ref ElbTgHealthCheckProtocol
      HealthCheckTimeoutSeconds: !Ref ElbTgHealthCheckTimeoutSeconds
      UnhealthyThresholdCount: !Ref ElbTgHealthCheckThresholdCount
      Matcher:
        HttpCode: !Ref ElbTgMatcherHttpCode
      VpcId: !Ref VpcId
      Port: !Ref ElbTgPort
      Protocol: !Ref ElbTgProtocol
      TargetGroupAttributes:
        - Key: 'stickiness.enabled'
          Value: true
        - Key: 'stickiness.type'
          Value: 'lb_cookie'
        - Key: 'stickiness.lb_cookie.duration_seconds'
          Value: !Ref ElbTgSessionStickinessSeconds
      TargetType: !Ref ElbTgTargetType

  # -----------------------------------------------------------
  # Elastic Load Balancer (ELB)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-loadbalancer.html
  # -----------------------------------------------------------
  Alb:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Type: !Ref ElbType
      Scheme: !Ref ElbScheme
      SecurityGroups:
        - !GetAtt AlbSecurityGroup.GroupId
      Subnets: !Ref Subnets

  # -----------------------------------------------------------
  # EC2 ALB Listeners
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-elasticloadbalancingv2-listener.html
  # -----------------------------------------------------------
   # Listener that redirects all HTTP traffic to HTTPS
  AlbListenerHttp:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref Alb
      DefaultActions:
        - Type: 'redirect'
          RedirectConfig:
            Protocol: 'HTTPS'
            Port: 443
            Host: '#{host}'
            Path: '/#{path}'
            Query: '#{query}'
            StatusCode: 'HTTP_301'
      Protocol: 'HTTP'
      Port: 80

  # HTTPS Listener that sends traffic to the ALB target (ECS) over HTTP
  AlbListenerHttps:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      LoadBalancerArn: !Ref Alb
      DefaultActions:
        - Type: 'forward'
          TargetGroupArn: !Ref AlbTargetGroup
      Protocol: 'HTTPS'
      Port: 443
      Certificates:
        - CertificateArn: !Ref CertificateArn

  # -----------------------------------------------------------
  # EC2 Security Groups for ECS containers
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  # -----------------------------------------------------------
  AlbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub 'Fargate security group for ${AWS::StackName}'
      GroupName: !Sub '${AWS::StackName}-alb-sec'
      VpcId: !Ref VpcId

  # The ALB will terminate the SSL, so only accept 443 here
  AlbSecurityGroupIngressHttps:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn:
      - AlbSecurityGroup
    Properties:
      IpProtocol: 'tcp'
      FromPort: 443
      ToPort: 443
      CidrIp: '0.0.0.0/0'
      GroupId: !GetAtt AlbSecurityGroup.GroupId

  # -----------------------------------------------------------
  # Elastic Load Balancer (ELB) - Web Application Firewall (WAF) association
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wafv2-webaclassociation.html
  # -----------------------------------------------------------
  WafAlbAssociation:
    Type: 'AWS::WAFv2::WebACLAssociation'
    Properties:
      WebACLArn: !Ref WafArn
      ResourceArn: !Ref Alb

Outputs:
  AlbTargetGroupArn:
    Value: !Ref AlbTargetGroup
  AlbTargetGroupFullName:
    Value: !GetAtt AlbTargetGroup.TargetGroupFullName

  AlbArn:
    Value: !Ref Alb
  AlbFullName:
    Value: !GetAtt Alb.LoadBalancerFullName
  AlbDnsName:
    Value: !GetAtt Alb.DNSName
  AlbHostedZoneId:
    Value: !GetAtt Alb.CanonicalHostedZoneID
  AlbTargetGroupPort:
    Value: !Ref ElbTgPort

  AlbSecurityGroupID:
    Value: !GetAtt AlbSecurityGroup.GroupId

  AlbListenerHttpsId:
    Value: !Ref AlbListenerHttps