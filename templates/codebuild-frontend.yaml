AWSTemplateFormatVersion: '2010-09-09'

Description: 'CodeBuild for the DMPSP frontend application'

Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'

  Program:
    Type: 'String'

  Service:
    Type: 'String'

  Subservice:
    Type: 'String'

  CodeRepo:
    Type: 'String'

  Contact:
    Type: 'String'

  Env:
    Type: 'String'
    Default: 'dev'

  CodePipelineLogGroupArn:
    Type: 'String'

  CodePipelineLogGroupName:
    Type: 'String'

  EcrRepositoryArn:
    Type: 'String'

  EcrRepositoryUri:
    Type: 'String'

  EcrRepositoryName:
    Type: 'String'

  S3ArtifactBucketId:
    Type: 'String'

  S3ArtifactBucketArn:
    Type: 'String'

  CodeStarConnectionArn:
    Type: 'String'

  DbSecurityGroupId:
    Type: 'String'

  DbPort:
    Type: 'Number'
    Default: 5432

  CodeBuildEnvironmentType:
    Type: 'String'
    Default: 'LINUX_CONTAINER'

  CodeBuildEnvironmentComputeType:
    Type: 'String'
    Default: 'BUILD_GENERAL1_SMALL'

  CodeBuildEnvironmentImage:
    Type: 'String'
    # Default is AL2023
    Default: 'aws/codebuild/amazonlinux2-x86_64-standard:5.0'

  CodeBuildArtifactType:
    Type: 'String'
    Default: 'GITHUB'

  CodeBuildTimeout:
    Type: 'Number'
    Default: 15 # minutes

Resources:
  # -----------------------------------------------------------
  # Identitity and Access Management (IAM)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_IAM.html
  # -----------------------------------------------------------
  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'codebuild.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser'
      Policies:
        - PolicyName: !Sub '${AWS::StackName}-build-policy'
          PolicyDocument: !Sub >
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:AssociateKmsKey"
                  ],
                  "Resource": [
                    "${CodePipelineLogGroupArn}",
                    "${CodePipelineLogGroupArn}:*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "codebuild:CreateReportGroup",
                    "codebuild:CreateReport",
                    "codebuild:UpdateReport",
                    "codebuild:BatchPutTestCases",
                    "codebuild:BatchPutCodeCoverages"
                  ],
                  "Resource": [
                    "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/*'"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject",
                    "s3:GetObject",
                    "s3:GetObjectVersion",
                    "s3:GetBucketAcl",
                    "s3:GetBucketLocation"
                  ],
                  "Resource": [
                    "${S3ArtifactBucketArn}",
                    "${S3ArtifactBucketArn}/*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*",
                    "ec2:CreateNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeDhcpOptions",
                    "ec2:DescribeVpcs",
                    "ec2:CreateNetworkInterfacePermission"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ssm:GetParameters",
                    "ssm:GetParameter"
                  ],
                  "Resource": ["*"]
                },
                {
                  "Effect": "Allow",
                  "Action": ["secretsmanager:GetSecretValue"],
                  "Resource": ["*"]
                },
                {
                  "Effect": "Allow",
                  "Action": ["ecr:*"],
                  "Resource": ["${EcrRepositoryArn}"]
                },
                {
                  "Effect": "Allow",
                  "Action": ["codestar-connections:UseConnection"],
                  "Resource": "${CodeStarConnectionArn}"
                }
              ]
            }

  # ---------------------------------------------------------------------------------
  # EC2 Security Groups to let CodeBuild run DB migrations
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  # ---------------------------------------------------------------------------------
  CodeBuildSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub '${AWS::StackName} CodeBuild Security Group'
      GroupName: !Sub '${AWS::StackName}-sec-grp'
      VpcId: !Ref VpcId
      # Setting our own tags here because we need to include the `ConfigExclude` for this resource
      Tags:
        - Key: 'Program'
          Value: !Ref Program
        - Key: 'Service'
          Value: !Ref Service
        - Key: 'Subservice'
          Value: !Ref Subservice
        - Key: 'Environment'
          Value: !Ref Env
        - Key: 'CodeRepo'
          Value: !Ref CodeRepo
        - Key: 'Contact'
          Value: !Ref Contact
        - Key: 'ConfigExclude'
          Value: 'Security-group-attached-to-ENI'

  # -----------------------------------------------------------
  # CodeBuild
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_CodeBuild.html
  # -----------------------------------------------------------
  CodeBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      QueuedTimeoutInMinutes: 5
      Artifacts:
        Type: 'CODEPIPELINE'
        OverrideArtifactName: true
      ConcurrentBuildLimit: 1
      Cache:
        Type: 'S3'
        Location: !Sub '${S3ArtifactBucketId}/rails/build-cache'
      Environment:
        ComputeType: !Ref CodeBuildEnvironmentComputeType
        Image: !Ref CodeBuildEnvironmentImage
        ImagePullCredentialsType: 'CODEBUILD'
        PrivilegedMode: true
        Type: !Ref CodeBuildEnvironmentType
        EnvironmentVariables:
          - Name: 'BUILD_ENV'
            Value: !Ref Env
          - Name: 'ECR_REPOSITORY_URI'
            Value: !Ref EcrRepositoryUri
          - Name: 'ECR_REPOSITORY_NAME'
            Value: !Ref EcrRepositoryName
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref CodePipelineLogGroupName
          Status: 'ENABLED'
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: 'CODEPIPELINE'
      TimeoutInMinutes: 15

Outputs:
  CodeBuildRoleArn:
    Value: !GetAtt CodeBuildRole.Arn

  CodeBuildProjectId:
    Value: !Ref CodeBuildProject

  CodeBuildProjectArn:
    Value: !GetAtt CodeBuildProject.Arn
