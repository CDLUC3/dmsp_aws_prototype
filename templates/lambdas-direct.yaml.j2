---
{% import 'lambda-dict.j2' as imported %}

AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: 'DMPHub Lambda functions that are invoked directly by other Lambdas'

Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'

  Env:
    Type: 'String'

  CodePipelineIAMRoleArn:
    Type: 'String'
  CodeBuildIAMRoleArn:
    Type: 'String'
  CodeDeployIAMRoleArn:
    Type: 'String'

  S3CodePipelineBucket:
    Type: 'String'
  S3LambdaCodeSigningBucketId:
    Type: 'String'
  S3RepositoryBucket:
    Type: 'String'

  CodeBuildSecurityGroupId:
    Type: 'String'

  # LambdaCodeSigningConfigArn:
  #   Type: 'String'

  CodeStarConnectionArn:
    Type: 'String'

  RepositoryBranchToMonitor:
    Type: 'String'

  DynamoTableName:
    Type: 'String'
  DynamoTableArn:
    Type: 'String'

  S3BucketId:
    Type: 'String'
  S3BucketArn:
    Type: 'String'

  SnsTopicEmailArn:
    Type: 'String'

  LogGroupId:
    Type: 'String'

Resources:
  {% for lambda_dict in imported.DIRECT_LAMBDAS %}
  # -----------------------------------------------------------
  # Identitity and Access Management (IAM)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_IAM.html
  #
  # Build out custom roles for each Lambda so that it only has access to the things it needs
  # -----------------------------------------------------------
  {{lambda_dict['name']}}Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        # Allow this Lambda to write to CloudWatch
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        # Allow this Lambda to invoke other Lambdas
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'

        {% if lambda_dict['s3']|length > 0 %}
        # Allow this Lambda to read from S3 buckets
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
        {% if 'write' in lambda_dict['s3'] %}
        # Allow this Lambda to write to S3 buckets
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        {% endif %}
        {% endif %}

        {% if lambda_dict['dynamo']|length > 0 %}
        # Allow this Lambda to read from Dynamo tables
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess'
        {% if 'write' in lambda_dict['dynamo'] %}
          # Allow this Lambda to write to Dynamo tables
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
        {% endif %}
        {% endif %}

        {% if lambda_dict['sqs']|length > 0 %}
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        {% endif %}

  # -----------------------------------------------------------
  # Lambda Function
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
  # -----------------------------------------------------------
  {{lambda_dict['name']}}Function:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - {{lambda_dict['name']}}Role
    Properties:
      Code:
        # Change this to the destination bucket once code signing is setup
        # Also update the build.sh to do the code signing via CLI
        S3Bucket: !Ref S3LambdaCodeSigningBucketId
        S3Key: !Sub '${Env}-{{lambda_dict['tag']}}-lambda.zip'
      # CodeSigningConfigArn: LambdaCodeSigningConfigArn
      Handler: 'lambda_function.LambdaFunctions::Handler.process'
      PackageType: 'Zip'
      Role: !GetAtt {{lambda_dict['name']}}Role.Arn
      Runtime: 'ruby2.7'
      Timeout: 30
      # TODO: This isn't working, so maybe stuff them in SSM and have the Lambda fetch them there
      Environment:
        Variables:
          ENVIRONMENT: !Ref Env
          {% if lambda_dict['dynamo']|length > 0 %}
          AWS_DYNAMO_TABLE_NAME: !Ref DynamoTableName
          {% endif %}
          {% if lambda_dict['s3']|length > 0 %}
          AWS_SNS_S3_BUCKET_NAME: !Ref S3BucketId
          {% endif %}
          {% if lambda_dict['sqs']|length > 0 %}
          SNS_FATAL_ERROR_TOPIC: !Ref SnsTopicEmailArn
          {% endif %}

  # -----------------------------------------------------------
  # Lambda Version
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-version.html
  # -----------------------------------------------------------
  {{lambda_dict['name']}}Version:
    Type: 'AWS::Lambda::Version'
    Properties:
      Description: 'Initial version'
      FunctionName: !Ref {{lambda_dict['name']}}Function

  # -----------------------------------------------------------
  # Lambda Alias
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-alias.html
  # -----------------------------------------------------------
  {{lambda_dict['name']}}FunctionAlias:
    Type: 'AWS::Lambda::Alias'
    Properties:
      Name: !Sub '${Env}-{{lambda_dict['tag']}}-latest'
      FunctionName: !Ref {{lambda_dict['name']}}Function
      FunctionVersion: '$LATEST'

  # -----------------------------------------------------------
  # CodeBuild
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_CodeBuild.html
  # -----------------------------------------------------------
  {{lambda_dict['name']}}CodeBuildProject:
    Type: 'AWS::CodeBuild::Project'
    DependsOn:
      - {{lambda_dict['name']}}FunctionAlias
    Properties:
      ServiceRole: !Ref CodeBuildIAMRoleArn
      Artifacts:
        Type: 'CODEPIPELINE'
      LogsConfig:
        CloudWatchLogs:
          GroupName: !Ref LogGroupId
          Status: 'ENABLED'
          StreamName: 'codebuild-{{lambda_dict['tag']}}'
      Environment:
        Type: 'LINUX_CONTAINER'
        ComputeType: 'BUILD_GENERAL1_SMALL'
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:4.0'
        # This is required in order for the Docker daemon to work!
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: 'LAMBDA_ENVIRONMENT'
            Value: !Ref Env
          - Name: 'LAMBDA_NAME'
            Value: '{{lambda_dict['tag']}}'
          - Name: 'LAMBDA_ARN'
            Value: !GetAtt {{lambda_dict['name']}}Function.Arn
          - Name: 'LAMBDA_ID'
            Value: !Ref {{lambda_dict['name']}}Function
          - Name: 'LAMBDA_ALIAS'
            Value: !Sub '${Env}-{{lambda_dict['tag']}}-latest'
          - Name: 'CURRENT_VERSION'
            Value: !GetAtt {{lambda_dict['name']}}Version.Version
          - Name: 'S3_BUCKET'
            Value: !Ref S3RepositoryBucket
      Source:
        Type: 'CODEPIPELINE'
        BuildSpec: 'buildspec.yaml'
      TimeoutInMinutes: 15
      VpcConfig:
        VpcId: !Ref VpcId
        Subnets: !Ref Subnets
        SecurityGroupIds:
          - !Ref CodeBuildSecurityGroupId
      Cache:
        Type: 'S3'
        Location: !Sub '${S3CodePipelineBucket}/build-cache'

  # -----------------------------------------------------------
  # CodeDeploy
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codedeploy-deploymentgroup.html
  # -----------------------------------------------------------
  # {{lambda_dict['name']}}CodeDeployApplication:
  #   Type: 'AWS::CodeDeploy::Application'
  #   Properties:
  #     ApplicationName: !Sub '${Env}-{{lambda_dict['tag']}}-lambda'
  #     ComputePlatform: 'Lambda'

  # {{lambda_dict['name']}}CodeDeployGroup:
  #   Type: 'AWS::CodeDeploy::DeploymentGroup'
  #   DependsOn:
  #     - {{lambda_dict['name']}}CodeDeployApplication
  #   Properties:
  #     ApplicationName: !Ref {{lambda_dict['name']}}CodeDeployApplication
  #     ServiceRoleArn: !Ref CodeDeployIAMRoleArn
  #     DeploymentConfigName: 'CodeDeployDefault.LambdaAllAtOnce'
  #     # This Style is required for Lambda per: https://stackoverflow.com/questions/52636182/ec2tagfilters-in-deployment-group-for-computeplatform-lambda
  #     DeploymentStyle:
  #       DeploymentOption: 'WITH_TRAFFIC_CONTROL'
  #       DeploymentType: 'BLUE_GREEN'

  # -----------------------------------------------------------
  # CodePipeline
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-codepipeline-pipeline.html
  # -----------------------------------------------------------
  {{lambda_dict['name']}}Pipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    DependsOn:
      - {{lambda_dict['name']}}CodeBuildProject
      # - {{lambda_dict['name']}}CodeDeployGroup
    Properties:
      ArtifactStore:
        Location: !Ref S3CodePipelineBucket
        Type: 'S3'
      RestartExecutionOnUpdate: true
      RoleArn: !Ref CodePipelineIAMRoleArn
      Stages:
        - Name: 'MonitorRepo'
          Actions:
            - Name: 'GitHub'
              RunOrder: 1
              ActionTypeId:
                Category: 'Source'
                Owner: 'AWS'
                Provider: 'CodeStarSourceConnection'
                Version: '1'
              # See: https://docs.aws.amazon.com/codepipeline/latest/userguide/action-reference-CodestarConnectionSource.html
              # for info on tying CodeBuild in
              Configuration:
                ConnectionArn: !Ref CodeStarConnectionArn
                FullRepositoryId: 'CDLUC3/dmphub-v2-{{lambda_dict['tag']}}-lambda'
                BranchName: !Ref RepositoryBranchToMonitor
                OutputArtifactFormat: 'CODEBUILD_CLONE_REF'
              OutputArtifacts:
                - Name: '{{lambda_dict['tag']}}-commit'

        - Name: 'BuildPublish'
          Actions:
            - Name: 'ZipToS3'
              RunOrder: 2
              ActionTypeId:
                Category: 'Build'
                Owner: 'AWS'
                Provider: 'CodeBuild'
                Version: '1'
              Configuration:
                ProjectName: !Ref {{lambda_dict['name']}}CodeBuildProject
                PrimarySource: '{{lambda_dict['tag']}}-commit'
              InputArtifacts:
                - Name: '{{lambda_dict['tag']}}-commit'
              OutputArtifacts:
                - Name: '{{lambda_dict['tag']}}-appspec'

        # - Name: 'Deploy'
        #   Actions:
        #     - Name: 'DeployLambda'
        #       RunOrder: 3
        #       ActionTypeId:
        #         Category: 'Deploy'
        #         Owner: 'AWS'
        #         Provider: 'CodeDeploy'
        #         Version: '1'
        #       Configuration:
        #         ApplicationName: !Ref {{lambda_dict['name']}}CodeDeployApplication
        #         DeploymentGroupName: !Ref {{lambda_dict['name']}}CodeDeployGroup
        #       InputArtifacts:
        #         - Name: '{{lambda_dict['tag']}}-appspec'
  {% endfor %}

Outputs:
  {% for lambda_dict in imported.DIRECT_LAMBDAS %}
  {{lambda_dict['name']}}RoleId:
    Value: !Ref {{lambda_dict['name']}}Role

  {{lambda_dict['name']}}FunctionId:
    Value: !Ref {{lambda_dict['name']}}Function
  {{lambda_dict['name']}}FunctionArn:
    Value: !GetAtt {{lambda_dict['name']}}Function.Arn

  {{lambda_dict['name']}}AliasArn:
    Value: !Ref {{lambda_dict['name']}}FunctionAlias

  {{lambda_dict['name']}}VersionArn:
    Value: !Ref {{lambda_dict['name']}}Version
  {{lambda_dict['name']}}Version:
    Value: !GetAtt {{lambda_dict['name']}}Version.Version

  {{lambda_dict['name']}}CodeBuildProjectName:
    Value: !Ref {{lambda_dict['name']}}CodeBuildProject
  {{lambda_dict['name']}}CodeBuildProjectArn:
    Value: !GetAtt {{lambda_dict['name']}}CodeBuildProject.Arn

  # {{lambda_dict['name']}}CodeDeployGroupId:
  #   Value: !Ref {{lambda_dict['name']}}CodeDeployGroup

  {{lambda_dict['name']}}PipelineId:
    Value: !Ref {{lambda_dict['name']}}Pipeline
  {{lambda_dict['name']}}PipelineVersion:
    Value: !GetAtt {{lambda_dict['name']}}Pipeline.Version
  {% endfor %}
