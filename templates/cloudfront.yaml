AWSTemplateFormatVersion: '2010-09-09'

Description: 'Cloudfront for the React web pages and serving DMP PDFs'

Parameters:
  Domain:
    Type: 'String'

  SsmPath:
    Type: 'String'

  S3LogBucketId:
    Type: 'String'

  S3CloudFrontBucketId:
    Type: 'String'

  S3CloudFrontBucketArn:
    Type: 'String'

  CertificateArn:
    Type: 'String'

  WafArn:
    Type: 'String'

  CacheDefaultTtlSeconds:
    Type: 'Number'
    Default: 7200 # 2 hours

  CacheMinTtlSeconds:
    Type: 'Number'
    Default: 60 # 1 minute

  CacheMaxTtlSeconds:
    Type: 'Number'
    Default: 86400 # 1 day

Resources:
  # ---------------------------------------------------------------------
  # CloudFront Distribution that serves React pages and PDF documents
  # See:  https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_CloudFront.html
  # ---------------------------------------------------------------------
  CloudfrontCachePolicy:
    Type: 'AWS::CloudFront::CachePolicy'
    Properties:
      CachePolicyConfig:
        Name: !Sub "${AWS::StackName}-cache-policy"
        Comment: !Sub "${AWS::StackName} CloudFront cache policy"
        DefaultTTL: !Ref CacheDefaultTtlSeconds
        MaxTTL: !Ref CacheMaxTtlSeconds
        MinTTL: !Ref CacheMinTtlSeconds
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: 'none'
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: 'none'
          QueryStringsConfig:
            QueryStringBehavior: 'none'

  # TODO: Set this up to pass specific headers through
  # CloudfrontOriginRequestPolicy:

  # ----------------------------------------------------
  # CloudFront Function that allow us to access the root object in subdirectories
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudfront-function.html
  # ----------------------------------------------------
  CloudFrontFunction:
    Type: 'AWS::CloudFront::Function'
    Properties:
      Name: !Sub "${AWS::StackName}-index-function"
      AutoPublish: true
      FunctionCode: >
        // This script is required in order for CloudFront to be able to find the appropriate resource
        // when the user requests a path without a file and/or extenstion (e.g. /blog gets rewritten
        // to /blog/index.html).
        //   See: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/example-function-add-index.html

        function handler(event) {
          var request = event.request;
          var uri = request.uri;

          if (uri.endsWith('/')) {
            // Check whether the URI is missing a file name.
            request.uri += 'index.html';
          } else if (!uri.includes('.')) {
            // Check whether the URI is missing a file extension.
            request.uri += '/index.html';
          }
          return request;
        }
      FunctionConfig:
        Runtime: 'cloudfront-js-1.0'
        Comment: 'Function that appends index.html to requests for subdirectories (e.g. /blog)'

  CloudfrontOrginAccessControl:
    Type: 'AWS::CloudFront::OriginAccessControl'
    DependsOn:
      - CloudFrontFunction
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-oac"
        Description: !Sub "${AWS::StackName} Cloudfront to S3 OAC"
        OriginAccessControlOriginType: 's3'
        SigningBehavior: 'always'
        SigningProtocol: 'sigv4'

  CloudfrontDistro:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !Sub "${S3CloudFrontBucketId}.s3.amazonaws.com"
            #DomainName: !Sub "${S3CloudFrontBucketId}.s3.${AWS::Region}.amazonaws.com"
            Id: !Sub "${AWS::StackName}-CloudFrontS3Origin"
            OriginAccessControlId: !Ref CloudfrontOrginAccessControl
            S3OriginConfig:
              OriginAccessIdentity: !Ref AWS::NoValue
              # OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudfrontOriginAccessIdentity}'
        Enabled: 'true'
        Comment: !Sub "${AWS::StackName} CloudFront Distribution"
        DefaultRootObject: 'index.html'
        Logging:
          IncludeCookies: 'false'
          Bucket: !Sub "${S3LogBucketId}.s3.amazonaws.com"
          Prefix: 'cloudfront'
        Aliases:
          - 'dmphub-dev.cdlib.org'
        DefaultCacheBehavior:
          AllowedMethods:
          - 'GET'
          - 'HEAD'
          - 'OPTIONS'
          TargetOriginId: !Sub "${AWS::StackName}-CloudFrontS3Origin"
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: 'none'
          ViewerProtocolPolicy: 'redirect-to-https'
          FunctionAssociations:
            - EventType: 'viewer-request'
              FunctionARN: !GetAtt CloudFrontFunction.FunctionARN
        # Using Price Class ALL to support our large South American user base
        #   See: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html
        PriceClass: 'PriceClass_All'
        Restrictions:
          GeoRestriction:
            RestrictionType: 'none'
        Staging: 'false'
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: 'TLSv1.2_2018'
          SslSupportMethod: 'sni-only'
        WebACLId: !Ref WafArn

  # ----------------------------------------------------
  # Managed IAM Policy for allowing CloudFront Distribution to access our S3 Bucket
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html
  # ----------------------------------------------------
  CloudfrontS3BucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    DependsOn:
      - CloudfrontDistro
    Properties:
      Bucket: !Ref S3CloudFrontBucketId
      PolicyDocument:
        # Version: '2008-10-27'
        Version: '2012-10-17'
        Statement:
          # Sid: 'AllowCloudFrontServicePrincipal'
          Sid: 'AllowCloudFrontServicePrincipalReadOnly'
          Effect: 'Allow'
          Principal:
            Service: 'cloudfront.amazonaws.com'
          Action: 's3:GetObject'
          Resource: !Sub "${S3CloudFrontBucketArn}/*"
          Condition:
            StringEquals:
              "AWS:SourceArn": !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudfrontDistro}"

  # ----------------------------------------------
  # SSM Parameter Store
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ssm-parameter.html
  # ----------------------------------------------
  CloudFrontDistroIdParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "${AWS::StackName} CloudFront Distro Id"
      Name: !Sub "${SsmPath}CloudFrontDistroId"
      Type: 'String'
      Value: !Ref CloudfrontDistro

Outputs:
  CloudfrontDistroId:
    Value: !Ref CloudfrontDistro

  CloudfrontDistroDomainName:
    Value: !GetAtt CloudfrontDistro.DomainName

  CloudfrontOriginAccessControlId:
    Value: !GetAtt CloudfrontOrginAccessControl.Id

  CloudfrontCachePolicyId:
    Value: !Ref CloudfrontCachePolicy

  CloudfrontS3PolicyArn:
    Value: !Ref CloudfrontS3BucketPolicy
