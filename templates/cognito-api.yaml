AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: 'Cognito resources for accessing the API'

Parameters:
  HostedZoneId:
    Type: 'String'

  CertificateArn:
    Type: 'String'

  Domain:
    Type: 'String'

  # TODO: Swap out the references below
  Subdomain:
    Type: 'String'

  Env:
    Type: 'String'
    Default: 'dev'

  SsmPath:
    Type: 'String'

  UserPoolClientName:
    Type: 'String'

  UserPoolClientCallbackUri:
    Type: 'String'

Resources:

  # See the following for example of hooking an ALB up to Cognito
  #   https://www.kdgregory.com/index.php?page=aws.albCognito
  #   https://www.kdgregory.com/misc/aws.albCognito/examples/template.yml

  UserPool:
    Type: 'AWS::Cognito::UserPool'
    DeletionPolicy: Retain
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      # There's an open issue on this for AWS, but because this one is not named 'Tags' it doesn't inherit the stack tags
      UserPoolName: !Sub '${AWS::StackName}-UserPool'
      UserPoolTags:
        Program: 'uc3'
        Service: 'dmp'
        Subservice: 'hub'
        Environment: !Ref Env

  UserPoolResourceServer:
    Type: 'AWS::Cognito::UserPoolResourceServer'
    Properties:
      Name: !Sub '${AWS::StackName}-UserPoolResourceServer'
      Identifier: !Sub 'https://${Subdomain}-auth.${Domain}'
      # Identifier: !Sub "https://api.${Subdomain}.${Domain}"
      UserPoolId: !Ref UserPool
      Scopes:
        - ScopeName: !Sub '${Env}.read'
          ScopeDescription: 'Allows access to the GET api endpoints (default) (e.g. getDmp, getDmps)'
        - ScopeName: !Sub '${Env}.write'
          ScopeDescription: 'Allows access to POST, PUT and DELETE for DMPs (e.g. postDmp, putDmp, deleteDmp)'

  # Add the Systems UserPool ARN to SSM so that our Lambdas can access it
  UserPoolArnParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "${AWS::StackName} Cognito UserPool for API access"
      Name: !Sub "${SsmPath}ApiUserPoolArn"
      # Note: AWS CloudFormation does not yet support creating a SecureString parameter type.
      Type: 'String'
      Value: !GetAtt UserPool.Arn

  # Add the DMPTool as an initial client (not sure if we want to do this long term, probably better to retain the pool)
  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    DependsOn:
      - SystemPoolResourceServer
    DeletionPolicy: Retain
    Properties:
      ClientName: !Ref UserPoolClientName
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - 'ALLOW_ADMIN_USER_PASSWORD_AUTH'
        - 'ALLOW_CUSTOM_AUTH'
        - 'ALLOW_USER_SRP_AUTH'
        - 'ALLOW_REFRESH_TOKEN_AUTH'
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - 'client_credentials'
      AllowedOAuthScopes:
        - !Sub 'https://${Subdomain}-auth.${Domain}/${Env}.read'
        # - !Sub 'https://api.${Subdomain}.${Domain}/${Env}.read'
        - !Sub 'https://${Subdomain}-auth.${Domain}/${Env}.write'
        # - !Sub 'https://api.${Subdomain}.${Domain}/${Env}.write'
      EnableTokenRevocation: true
      PreventUserExistenceErrors: 'ENABLED'
      GenerateSecret: true
      SupportedIdentityProviders:
        - 'COGNITO'
      # The CF docs indicate that this is not required but I am unable to get a token from Cognito without it
      CallbackURLs:
        - 'http://localhost:3000/callback'
        - !Ref UserPoolClientCallbackUri

Outputs:
  # TODO: Swap this out once the HostedZoneId is in place
  ApiAuthDomainName:
    Value: !Sub "${AWS::StackName}.auth.${AWS::Region}.amazoncognito.com"

  UserPoolId:
    Value: !Ref UserPool
  UserPoolArn:
    Value: !GetAtt UserPool.Arn
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolArn'
  # UserPoolDomain:
  #   Value: !Ref UserPoolDomain

  # UserPoolResourceServerId:
  #   Value: !Ref UserPoolResourceServer
