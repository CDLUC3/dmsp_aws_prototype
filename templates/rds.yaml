AWSTemplateFormatVersion: '2010-09-09'

Transform: 'AWS::SecretsManager-2020-07-23'

Description: 'Persistent resources for the DMPRoadmap system'

Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'

  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'

  Env:
    Type: 'String'
    Default: 'dev'

  DbSnapshot:
    Type: 'String'
    Default: 'none'

  DbInstanceType:
    Type: 'String'
    Default: 'db.t3.small'

  DbSizeGb:
    Type: 'Number'
    Default: 20

  StorageType:
    Type: 'String'
    Default: 'io1'

  StorageEncrypted:
    Type: 'String'
    Default: 'false'

  DbEngine:
    Type: 'String'
    Default: 'postgres'

  DbEngineVersion:
    Type: 'String'
    Default: '15.4'

  LicenseModel:
    Type: 'String'
    Default: 'postgresql-license'

  MultiAz:
    Type: 'String'
    Default: 'false'

  DbName:
    Type: 'String'

  DbPort:
    Type: 'String'
    Default: '5432'

  DbBackupRetentionDays:
    Type: 'Number'
    Default: 7

  PreferredMaintenanceWindow:
    Type: 'String'
    Default: 'sat:08:00-sat:08:30'

  PreferredBackupWindow:
    Type: 'String'
    Default: '07:00-07:30'

  DbMasterUsername:
    Type: 'String'

Conditions:
  InitializeDb:
    !Not [!Equals [!Ref DbSnapshot, 'none']]

Resources:
  # -----------------------------------------------------------
  # Identitity and Access Management (IAM)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_IAM.html
  # -----------------------------------------------------------
  DbMonitoringRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'monitoring.rds.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole'

  # -----------------------------------------------------------
  # EC2 Security Groups for use with RDS database and S3 Bucket
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  # -----------------------------------------------------------
  DbSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub '${AWS::StackName} RDS security group'
      GroupName: !Sub '${AWS::StackName}-rds-sec'
      VpcId: !Ref VpcId

  # -------------------------------------------------
  # Subnet Group
  #  See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbsubnetgroup.html
  # -------------------------------------------------
  DbSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: !Sub '${AWS::StackName} DB Subnet group'
      SubnetIds:
        !Ref Subnets

  # -----------------------------------------------------------
  # Relational Database Service (RDS) - DB for the DMPTool Rebuild
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_RDS.html
  # -----------------------------------------------------------
  Database:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Snapshot # Will create a snapshot before deleting
    DependsOn:
      - DbSubnetGroup
      - DbSecurityGroup
    Properties:
      VPCSecurityGroups:
        - !Ref DbSecurityGroup
      DBSubnetGroupName: !Ref DbSubnetGroup
      MultiAZ: !Ref MultiAz
      # If an RDS Snapshot was defined, then instruct CF to restore it
      DBSnapshotIdentifier: !If
        - InitializeDb
        - !Ref DbSnapshot
        - !Ref AWS::NoValue
      PubliclyAccessible: false
      PreferredMaintenanceWindow: !Ref PreferredMaintenanceWindow
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      PreferredBackupWindow: !Ref PreferredBackupWindow
      BackupRetentionPeriod: !Ref DbBackupRetentionDays
      CopyTagsToSnapshot: true
      DBInstanceClass: 'db.t3.small'
      AllocatedStorage: !Ref DbSizeGb
      StorageType: !Ref StorageType
      StorageEncrypted: !Ref StorageEncrypted
      Port: !Ref DbPort
      Engine: !Ref DbEngine
      EngineVersion: !Ref DbEngineVersion
      LicenseModel: !Ref LicenseModel
      MonitoringInterval: '60'
      MonitoringRoleArn: !GetAtt DbMonitoringRole.Arn
      DBName: !Ref DbName
      DBInstanceClass: !Ref DbInstanceType
      # The default rotation schedule for the RDS instance's master credentials is 7 days
      ManageMasterUserPassword: true
      MasterUsername: !Ref DbMasterUsername

  # ----------------------------------------------------------
  # Secrets Manager
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_SecretsManager.html
  # ----------------------------------------------------------
  # Rails application (Pulled into the Apollo Server app during the CodeBuild step)
  AppCredentials:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: !Sub 'dmp-hub-${Env}-apollo-server-app'
      Description: !Sub '${AWS::StackName} Apollo server application credentials'
      GenerateSecretString:
        ExcludeCharacters: '/@\`|:;"'
        GenerateStringKey: 'password'
        SecretStringTemplate: !Sub >
          {
            "host": "${Database.Endpoint.Address}",
            "port": "${Database.Endpoint.Port}",
            "dbname": "${DbName}",
            "username": "apollo-server-app"
          }

  # AppCredentialsRotationSchedule:
  #   Type: 'AWS::SecretsManager::RotationSchedule'
  #   Properties:
  #     HostedRotationLambda:
  #       ExcludeCharacters: '/@"'
  #       MasterSecretArn: !Ref Database.MasterUserSecret.SecretArn
  #       RotationType: 'PostgreSQLMultiUser' #!Sub >
          # {
          #   "masterarn": "${Database.MasterUserSecret.SecretArn}",
          #   "host": "${Database.Endpoint.Address}",
          #   "port": "${Database.Endpoint.Port}",
          #   "dbname": "${DbName}",
          #   "username": "apollo-server-app"
          # }
  #       VpcSecurityGroupIds:
  #         - !Ref DbSecurityGroup
  #       VpcSubnetIds:
  #         - !Ref DbSubnetGroup
  #     RotationRules:
  #       ScheduleExpression: 'rate(30 days)'
  #       Duration: '2h'
  #     SecretId: !Ref AppCredentials

Outputs:
  DbMonitoringRoleArn:
    Value: !Ref DbMonitoringRole

  DbSecurityGroupId:
    Value: !GetAtt DbSecurityGroup.GroupId
    Export:
      Name: !Sub '${Env}-DbSecurityGroupId'

  DbSubnetName:
    Value: !Ref DbSubnetGroup
    Export:
      Name: !Sub '${Env}-DbSubnetName'

  DbInstanceName:
    Value: !Ref Database

  DbInstanceArn:
    Value: !GetAtt Database.DBInstanceArn

  DbAddress:
    Value: !GetAtt Database.Endpoint.Address

  DbPort:
    Value: !GetAtt Database.Endpoint.Port

  DbName:
    Value: !Ref DbName

  DbaCredentialsArn:
    Value: !GetAtt Database.MasterUserSecret.SecretArn

  AppCredentialsArn:
    Value: !Ref AppCredentials

  AppCredentialsId:
    Value: !GetAtt AppCredentials.Id

  # AppCredentialsRotationScheduleArn:
  #   Value: !Ref AppCredentialsRotationSchedule
