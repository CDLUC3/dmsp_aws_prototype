AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: 'Builds for Dynamo table and S3 bucket that stores DMP narrative docs'

Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
  PrivateSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
  PublicSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
  CidrBlock:
    Type: 'String'

  Subdomain:
    Type: 'String'
  Env:
    Type: 'String'
  SsmPath:
    Type: 'String'

  EcrLifecyclePolicyTagPrefix:
    Type: 'String'
    Default: 'latest'

  RdsSnapshot:
    Type: 'String'
    Default: 'none'

  RdsInstanceType:
    Type: 'String'
    Default: 'db.t3.small'
  RdsSizeGB:
    Type: 'Number'
    Default: 20
  RdsEngine:
    Type: 'String'
    Default: 'MySQL'
  RdsEngineVersion:
    Type: 'String'
    Default: '8.0.30'
  RdsPort:
    Type: String
    Default: '3306'
  RdsUsername:
    Type: 'String'
  RdsPassword:
    Type: 'String'
  RdsName:
    Type: 'String'

Conditions:
  InitializeRds:
    !Not [!Equals [!Ref RdsSnapshot, 'none']]

Resources:
  # ----------------------------------------------
  # DynamoDB polymorphic table
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
  # ----------------------------------------------
  DynamoTable:
    Type: 'AWS::DynamoDB::Table'
    DeletionPolicy: Retain
    Properties:
      # The base table's Partition key and Sort Key define both the DMP ID and version
      # There are 3 potential variants of these keys:
      # PK - PROVENANCE#dmptool,      SK - PROFILE                       <--- Provenance info
      # PK - PROVENANCE#dmptool,      SK - DMPS                          <--- Array of DMP PKs for the Provenance
      # PK - DMP#doi:10.48321/D1M30K, SK - VERSION#latest                <--- Latest version
      # PK - DMP#doi:10.48321/D1M30K, SK - VERSION#2022-02-18T12:30:25Z  <--- Historical version
      # PK - PERSON#[orcid],          SK - DMPS                          <--- Array of DMP PKs for the Person
      # PK - AFFILIATION#[id],        SK - DMPS                          <--- Array of DMP PKs for the Affiliation / Funder
      # PK - RELATED#[:id],           SK - DMPS                          <--- Array of DMP PKs for the Related Identifier / Grant

      KeySchema:
        - AttributeName: 'PK'
          KeyType: 'HASH'
        - AttributeName: 'SK'
          KeyType: 'RANGE'

      AttributeDefinitions:
        # DMPHub attribute that stores the provenance/DMP id (see above)
        - AttributeName: 'PK'
          AttributeType: 'S'
        # DMPHub attribute that stores the provenance profile or the DMP version (see above)
        - AttributeName: 'SK'
          AttributeType: 'S'
        # DMPHub attribute that stores the mod date as YYYY-MM-DD for fast date range retrievals
        - AttributeName: 'dmphub_modification_day'
          AttributeType: 'S'
        # The originating provenance system's ID for the DMP
        - AttributeName: 'dmphub_provenance_identifier'
          AttributeType: 'S'
        # DMPHub attribute that stores the id of the provenance user/system
        - AttributeName: 'dmphub_provenance_id'
          AttributeType: 'S'
        # DMPHub attribute that stores all affiliation/funder/sponsor RORs and Fundrefs
        - AttributeName: 'dmphub_affiliation_ids'
          AttributeType: 'S'
        # DMPHub attribute that stores all related identifiers and grant ids
        - AttributeName: 'dmphub_related_identifier_ids'
          AttributeType: 'S'
        # DMPHub attribute that stores all contributor/contact emails and ORCIDs
        - AttributeName: 'dmphub_contributor_ids'
          AttributeType: 'S'

      GlobalSecondaryIndexes:
        # An index to help us quickly fetch all of the DMPs for a specific date range
        - IndexName: 'modification_day_gsi'
          KeySchema:
            - AttributeName: 'dmphub_modification_day'
              KeyType: 'HASH'
            - AttributeName: 'PK'
              KeyType: 'RANGE'
          Projection:
            ProjectionType: 'INCLUDE'
            NonKeyAttributes: ['SK', 'title', 'contact', 'dmphub_affiliation_ids']
          ContributorInsightsSpecification:
            Enabled: true
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

        # An index to help us quickly fetch a DMP by its identifier for the provenance system
        - IndexName: 'dmphub_provenance_identifier_gsi'
          KeySchema:
            - AttributeName: 'dmphub_provenance_identifier'
              KeyType: 'HASH'
            - AttributeName: 'PK'
              KeyType: 'RANGE'
          Projection:
            ProjectionType: 'INCLUDE'
            NonKeyAttributes: ['PK', 'SK']
          ContributorInsightsSpecification:
            Enabled: true
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

        # An index to help us quickly fetch all of the DMPs for a specific provenance
        - IndexName: 'provenance_dmps_gsi'
          KeySchema:
            - AttributeName: 'dmphub_provenance_id'
              KeyType: 'HASH'
            - AttributeName: 'PK'
              KeyType: 'RANGE'
          Projection:
            ProjectionType: 'KEYS_ONLY'
          ContributorInsightsSpecification:
            Enabled: true
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

        # An index to help us quickly fetch all of the DMPs for a specific ROR/Fundref
        - IndexName: 'affiliation_ids_gsi'
          KeySchema:
            - AttributeName: 'dmphub_affiliation_ids'
              KeyType: 'HASH'
            - AttributeName: 'PK'
              KeyType: 'RANGE'
          Projection:
            ProjectionType: 'INCLUDE'
            NonKeyAttributes: ['title', 'contact', 'project', 'dmphub_contributor_ids']
          ContributorInsightsSpecification:
            Enabled: true
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

        # An index to help us quickly fetch all of the DMPs for a specific contributor email/ORCID
        - IndexName: 'contributor_ids_gsi'
          KeySchema:
            - AttributeName: 'dmphub_contributor_ids'
              KeyType: 'HASH'
            - AttributeName: 'PK'
              KeyType: 'RANGE'
          Projection:
            ProjectionType: 'INCLUDE'
            NonKeyAttributes: ['title', 'contact']
          ContributorInsightsSpecification:
            Enabled: true
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

        # An index to help us quickly fetch all of the DMPs for a specific related identifier
        - IndexName: 'related_identifier_ids_gsi'
          KeySchema:
            - AttributeName: 'dmphub_related_identifier_ids'
              KeyType: 'HASH'
            - AttributeName: 'PK'
              KeyType: 'RANGE'
          Projection:
            ProjectionType: 'INCLUDE'
            NonKeyAttributes: ['title', 'contact']
          ContributorInsightsSpecification:
            Enabled: true
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

      BillingMode: 'PROVISIONED'
      TableClass: 'STANDARD'
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      ContributorInsightsSpecification:
        Enabled: true
      # Determine cost before enabling
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: false

  # Add the Table name to SSM so that our Lambdas can access it
  TableNameParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "${Subdomain}-${Env} DynamoTable"
      Name: !Sub "${SsmPath}DynamoTableName"
      # Note: AWS CloudFormation does not yet support creating a SecureString parameter type.
      Type: 'String'
      Value: !Select [1, !Split ['/', !GetAtt DynamoTable.Arn]]

  # Add the Table name to SSM so that our Lambdas can access it
  TableArnParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "${Subdomain}-${Env} DynamoTable"
      Name: !Sub "${SsmPath}DynamoTableArn"
      # Note: AWS CloudFormation does not yet support creating a SecureString parameter type.
      Type: 'String'
      Value: !GetAtt DynamoTable.Arn

  # ----------------------------------------------
  # Simple Storage Service (S3) buckets
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html
  # ----------------------------------------------
  # S3 Bucket that stores DMP documents and UI resources (publicy accessible via CloudFront CDN)
  S3Bucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: false

  # Add the Bucket URI to SSM so that our Lambdas can access it
  S3BucketParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "${Subdomain}-${Env} S3Bucket"
      Name: !Sub "${SsmPath}S3BucketUri"
      # Note: AWS CloudFormation does not yet support creating a SecureString parameter type.
      Type: 'String'
      Value: !Ref S3Bucket

  S3BucketUrlParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "${Subdomain}-${Env} S3Bucket"
      Name: !Sub "${SsmPath}S3BucketUrl"
      # Note: AWS CloudFormation does not yet support creating a SecureString parameter type.
      Type: 'String'
      Value: !GetAtt S3Bucket.WebsiteURL

  # Add the Bucket URI to SSM so that our Lambdas can access it
  S3BucketArnParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "${Subdomain}-${Env} S3Bucket"
      Name: !Sub "${SsmPath}S3BucketArn"
      # Note: AWS CloudFormation does not yet support creating a SecureString parameter type.
      Type: 'String'
      Value: !GetAtt S3Bucket.Arn

  # -----------------------------------------------------------
  # Elastic Container Repository (ECR) - Hosts the Rails application's Docker images
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_ECR.html
  # -----------------------------------------------------------
  ECRRepository:
    Type: 'AWS::ECR::Repository'
    DeletionPolicy: Retain
    Properties:
      RepositoryName: !Sub '${Subdomain}-${Env}-ecr'
      ImageScanningConfiguration:
        ScanOnPush: true
      LifecyclePolicy:
        # TODO: Update this to only keep the last 3 snapshots of 'untagged' since we
        #       are using 'latest' as the only tag.
        LifecyclePolicyText: !Sub >
          {
            "rules": [
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "imageCountMoreThan",
                  "countNumber": 1,
                  "tagStatus": "tagged",
                  "tagPrefixList": [
                    "${EcrLifecyclePolicyTagPrefix}"
                  ]
                },
                "description": "Ensure that we do not have more than 1 tagged version",
                "rulePriority": 1
              },
              {
                "action": {
                  "type": "expire"
                },
                "selection": {
                  "countType": "imageCountMoreThan",
                  "countNumber": 3,
                  "tagStatus": "untagged"
                },
                "description": "Only retain the last 3 versions",
                "rulePriority": 2
              }
            ]
          }

  # -----------------------------------------------------------
  # Identitity and Access Management (IAM)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_IAM.html
  # -----------------------------------------------------------
  RdsMonitoringRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'monitoring.rds.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole'

  # -----------------------------------------------------------
  # EC2 Security Groups for use with RDS database and S3 Bucket
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  # -----------------------------------------------------------
  RdsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub 'RDS security group for ${Subdomain}-${Env}'
      GroupName: !Sub '${Subdomain}-rds-sec'
      VpcId: !Ref VpcId

  # -----------------------------------------------------------
  # Relational Database Service (RDS) - DB for the application
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_RDS.html
  # -----------------------------------------------------------
  RdsSubnetGroupPrivate:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: !Sub 'Subnet group for ${Subdomain}-${Env}'
      SubnetIds:
        !Ref PrivateSubnets

  RdsDatabase:
    Type: 'AWS::RDS::DBInstance'
    DeletionPolicy: Snapshot
    DependsOn:
      - RdsSubnetGroupPrivate
      - RdsSecurityGroup
      # - RdsPasswordParameter
    Properties:
      VPCSecurityGroups:
        - !Ref RdsSecurityGroup
      DBSubnetGroupName: !Ref RdsSubnetGroupPrivate

      # If an RDS Snapshot was defined, then instruct CF to restore it
      DBSnapshotIdentifier: !If
        - InitializeRds
        - !Ref RdsSnapshot
        - !Ref AWS::NoValue

      PubliclyAccessible: false
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 7 # days
      CopyTagsToSnapshot: true
      AllocatedStorage: !Ref RdsSizeGB
      Port: !Ref RdsPort
      Engine: !Ref RdsEngine
      EngineVersion: !Ref RdsEngineVersion
      MonitoringInterval: '60'
      MonitoringRoleArn: !GetAtt RdsMonitoringRole.Arn
      DBName: !Ref RdsName
      DBInstanceClass: !Ref RdsInstanceType
      MasterUsername: !Ref RdsUsername
      MasterUserPassword: !Ref RdsPassword

  # Additional SSM Parameters required by the system

  # TODO: Potential deletions:
  #         - /uc3/dmp/hub/codestar_connection
  #         - /uc3/dmp/hub/dev/ApiBaseUrl
  #         - /uc3/dmp/hub/dev/BaseUrl
  #         - /uc3/dmp/hub/dev/
  #         - /uc3/dmp/hub/dev/

  # Places all lambdas into debug mode which means that the CloudWatch logs will become verbose
  DebugParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "${Subdomain}-${Env} Lambda Debug on/off flag"
      Name: !Sub "${SsmPath}Debug"
      # Note: AWS CloudFormation does not yet support creating a SecureString parameter type.
      Type: 'String'
      Value: !Ref S3Bucket
  !Sub "/uc3/dmp/hub/${Env}/Debug"

Outputs:
  DynamoTableName:
    Value: !Select [1, !Split ['/', !GetAtt DynamoTable.Arn]]
  DynamoTableId:
    Value: !Ref DynamoTable
  DynamoTableArn:
    Value: !GetAtt DynamoTable.Arn

  S3BucketId:
    Value: !Ref S3Bucket
  S3BucketUri:
    Value: !Sub "s3://${S3Bucket}"
  S3BucketArn:
    Value: !GetAtt S3Bucket.Arn

  EcrRepositoryName:
    Value: !Ref ECRRepository
  EcrRepositoryArn:
    Value: !GetAtt ECRRepository.Arn
  EcrRepositoryUri:
    Value: !GetAtt ECRRepository.RepositoryUri

  RdsInstanceName:
    Value: !Ref RdsDatabase
  RdsAddress:
    Value: !GetAtt RdsDatabase.Endpoint.Address
  RdsPort:
    Value: !GetAtt RdsDatabase.Endpoint.Port
  RdsName:
    Value: !Ref RdsName

  RdsSecurityGroupId:
    Value: !GetAtt RdsSecurityGroup.GroupId
