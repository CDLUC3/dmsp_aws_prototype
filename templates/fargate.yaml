AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: 'Serverless architecture for the DMPRoadmap system'

Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
  Subnets:
    Type: 'List<AWS::EC2::Subnet::Id>'

  Subdomain:
    Type: 'String'
  Env:
    Type: 'String'
    Default: 'dev'
  Domain:
    Type: 'String'

  EcsDesiredServiceCount:
    Type: 'Number'
    Default: 1
  EcsDefaultCapacityProvider:
    Type: 'String'
    Default: 'FARGATE'
  EcsNetworkMode:
    Type: 'String'
    Default: 'awsvpc' # Required for Fargate!
  EcsCpuAllocation:
    Type: 'Number'
    Default: '2048' # 2 vCPU
  EcsMemoryAllocation:
    Type: 'Number'
    Default: '4096' # 4GB
  EcsCpuArchitecture:
    Type: 'String'
    Default: 'X86_64'
  EcsOsFamily:
    Type: 'String'
    Default: 'LINUX'
  EcsPlatformVersion:
    Type: 'String'
    Default: 'LATEST'
  EcsPropogateTags:
    Type: 'String'
    Default: 'TASK_DEFINITION'
  EcsSchedulingStrategy:
    Type: 'String'
    Default: 'REPLICA'
  EcsStartTimeout:
    Type: 'Number'
    Default: 180
  EcsStopTimeout:
    Type: 'Number'
    Default: 60
  EcsHealthCheckGracePeriod:
    Type: 'Number'
    Default: 300 # 5 minutes (allows for slow startup)
  EcsAssignPublicIp:
    Type: 'String'
    Default: 'ENABLED'
  EcsDisableNetworking:
    Type: 'String'
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  EcsIsEssential:
    Type: 'String'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  EcsIsInteractive:
    Type: 'String'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  EcrRepositoryUri:
    Type: 'String'
  EcrRepositoryName:
    Type: 'String'

  AlbTargetGroupArn:
    Type: 'String'
  AlbDnsName:
    Type: 'String'
  AlbSecurityGroupId:
    Type: 'String'
  AlbTargetGroupProtocol:
    Type: 'String'
    Default: 'tcp'
  AlbTargetGroupPort:
    Type: 'Number'
    Default: 80

  MailPort:
    Type: 'Number'
    Default: 25
  MailProtocol:
    Type: 'String'
    Default: 'tcp'

  RailsEnv:
    Type: 'String'
  RailsLogLevel:
    Type: 'String'
    Default: 'warn'
    AllowedValues:
      - 'debug'
      - 'warn'
      - 'error'
  RailsPort:
    Type: 'String'
    Default: '80'

  RdsSecurityGroupId:
    Type: 'String'
  RdsSnapshot:
    Type: 'String'
    Default: 'none'
  RdsAddress:
    Type: 'String'
  RdsProtocol:
    Type: 'String'
    Default: 'tcp'
  RdsPort:
    Type: 'Number'
    Default: 3306
  RdsName:
    Type: 'String'
  RdsUsername:
    Type: 'String'
  RdsPassword:
    Type: 'String'

  ApiBaseUrl:
    Type: 'String'

Resources:
  # -----------------------------------------------------------
  # Identitity and Access Management (IAM)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_IAM.html
  # -----------------------------------------------------------
  # Role that grants the ECS container agent permission to make AWS API calls
  EcsTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'

  # Role that grants containers in the task permission to call AWS APIs on your behalf
  EcsTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ecs-tasks.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRDSDataFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSESFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'

  # -----------------------------------------------------------
  # EC2 Security Groups for ECS containers (see their definitions in application.yaml)
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  # -----------------------------------------------------------
  EcsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub 'Fargate security group for ${AWS::StackName}'
      GroupName: !Sub '${AWS::StackName}-ecs-sec'
      VpcId: !Ref VpcId

  # Allow traffic to the ECS instances from the ALB
  EcsSecurityGroupIngressFromAlb:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn:
      - EcsSecurityGroup
    Properties:
      IpProtocol: !Ref AlbTargetGroupProtocol
      FromPort: !Ref AlbTargetGroupPort
      ToPort: !Ref AlbTargetGroupPort
      GroupId: !GetAtt EcsSecurityGroup.GroupId
      SourceSecurityGroupId: !Ref AlbSecurityGroupId

  # Allow the RDS instance(s) to receive traffic from the ECS instance(s)
  DBSecurityGroupIngressFromEcs:
    Type: 'AWS::EC2::SecurityGroupIngress'
    DependsOn:
      - EcsSecurityGroup
    Properties:
      IpProtocol: !Ref RdsProtocol
      FromPort: !Ref RdsPort
      ToPort: !Ref RdsPort
      GroupId: !Ref RdsSecurityGroupId
      SourceSecurityGroupId: !GetAtt EcsSecurityGroup.GroupId

  # -----------------------------------------------------------
  # Elastic Container Service (ECS) - Containers that host the application
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_ECS.html
  # -----------------------------------------------------------
  EcsCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Sub '${AWS::StackName}-ecs-clst'
      CapacityProviders:
        - !Ref EcsDefaultCapacityProvider
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref EcsDefaultCapacityProvider

  # The Application/Task definition
  EcsTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn:
      - EcsTaskExecutionRole
      - EcsTaskRole
    Properties:
      Cpu: !Ref EcsCpuAllocation
      Memory: !Ref EcsMemoryAllocation
      ExecutionRoleArn: !GetAtt EcsTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt EcsTaskRole.Arn
      Family: !Sub '${AWS::StackName}-ecs'
      NetworkMode: !Ref EcsNetworkMode
      RuntimePlatform:
        CpuArchitecture: !Ref EcsCpuArchitecture
        OperatingSystemFamily: !Ref EcsOsFamily
      ContainerDefinitions:
        -
          Image: !Ref EcrRepositoryUri
          # Cpu: 2
          DisableNetworking: !Ref EcsDisableNetworking
          Essential: !Ref EcsIsEssential
          Interactive: !Ref EcsIsInteractive
          # Memory: 2000
          Name: !Ref Subdomain
          StartTimeout: !Ref EcsStartTimeout
          StopTimeout: !Ref EcsStopTimeout
          # TODO: Figure out why this is invalid for FARGATE
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-create-group: true
              awslogs-group: !Sub '${AWS::StackName}-ecs'
              awslogs-stream-prefix: !Sub '${Env}-ecs'
          PortMappings:
            # SES port
            - ContainerPort: !Ref MailPort
              Protocol: !Ref MailProtocol
            # ALB port
            - ContainerPort: !Ref AlbTargetGroupPort
              Protocol: !Ref AlbTargetGroupProtocol
            # RDS port
            - ContainerPort: !Ref RdsPort
              Protocol: !Ref RdsProtocol
          Environment:
            - Name: 'RAILS_ENV'
              Value: !Ref RailsEnv
            - Name: 'RAILS_LOG_LEVEL'
              Value: !Ref RailsLogLevel
            - Name: 'RAILS_LOG_TO_STDOUT'
              Value: true
            - Name: 'RAILS_MASTER_KEY'
              Value: !Sub '{{resolve:ssm:/uc3/dmp/hub/${Env}/RailsMasterKey}}'

            - Name: 'RAILS_HOST'
              Value: !Sub "${Subdomain}.${Domain}"
            - Name: 'RAILS_PORT'
              Value: !Ref RailsPort

            - Name: 'DB_SNAPSHOT'
              Value: !Ref RdsSnapshot
            - Name: 'DB_HOST'
              Value: !Ref RdsAddress
            - Name: 'DB_PORT'
              Value: !Ref RdsPort
            - Name: 'DB_NAME'
              Value: !Ref RdsName
            - Name: 'DB_USERNAME'
              Value: !Ref RdsUsername
            - Name: 'DB_PASSWORD'
              Value: !Ref RdsPassword

            - Name: 'API_BASE_URL'
              Value: !Ref ApiBaseUrl
              # Value: !Sub "${Subdomain}.${Domain}/api/v0"

  # Container Service definition
  EcsService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - EcsTaskDefinition
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: !Ref EcsDesiredServiceCount
      EnableECSManagedTags: true
      HealthCheckGracePeriodSeconds: !Ref EcsHealthCheckGracePeriod
      LaunchType: !Ref EcsDefaultCapacityProvider
      LoadBalancers:
        - TargetGroupArn: !Ref AlbTargetGroupArn
          ContainerPort: !Ref RailsPort
          ContainerName: !Ref Subdomain
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !GetAtt EcsSecurityGroup.GroupId
            - !Ref AlbSecurityGroupId
            - !Ref RdsSecurityGroupId
          AssignPublicIp: !Ref EcsAssignPublicIp
          Subnets: !Ref Subnets
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      PlatformVersion: !Ref EcsPlatformVersion
      PropagateTags: !Ref EcsPropogateTags
      SchedulingStrategy: !Ref EcsSchedulingStrategy
      TaskDefinition: !Ref EcsTaskDefinition

Outputs:
  EcsFargateClusterId:
    Value: !Ref EcsCluster
  EcsFargateClusterArn:
    Value: !GetAtt EcsCluster.Arn
  EcsServiceArn:
    Value: !Ref EcsService
  EcsServiceName:
    Value: !GetAtt EcsService.Name
  EcsTaskId:
    Value: !Ref EcsTaskDefinition
