AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  dmp-hub-sam

  Sample SAM Template for dmp-hub-sam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Tracing: 'Active'

Parameters:
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
  SubnetA:
    Type: 'AWS::EC2::Subnet::Id'
  SubnetB:
    Type: 'AWS::EC2::Subnet::Id'
  SubnetC:
    Type: 'AWS::EC2::Subnet::Id'

  HostedZoneId:
    Type: 'String'

  DbSecGroupId:
    Type: 'String'

  EventBusArn:
    Type: 'String'

  Env:
    Type: 'String'
    Default: 'dev'

  CertificateArn:
    Type: 'String'

  CognitoUserPoolArn:
    Type: 'String'

  DomainName:
    Type: 'String'

  DynamoTableArn:
    Type: 'String'

  S3CloudFrontBucketArn:
    Type: 'String'

  SnsEmailTopicArn:
    Type: 'String'

  DeadLetterQueueArn:
    Type: 'String'

  RdsHost:
    Type: 'String'

  RdsPort:
    Type: 'String'
    Default: '3306'

  RdsDbName:
    Type: 'String'
    Default: 'dmp'

  LogRetentionDays:
    Type: 'Number'
    Default: 7

  CorsHeaders:
    Type: 'String'
    Default: 'Accept, Authorization, Content-Type, Origin, Referer, User-Agent'

Resources:
  # -----------------------------------------------------------
  # SSM Parameter used to toggle lambda debug mode
  # -----------------------------------------------------------
  # Places all lambdas into debug mode which means that the CloudWatch logs will become verbose
  DebugParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "${AWS::StackName} Lambda Debug on/off flag"
      Name: !Sub "/uc3/dmp/hub/${Env}/Debug"
      Type: 'String'
      Value: 'false'

  # ----------------------------------------------------
  # Managed IAM Policies for DMPHub resources
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html
  # ----------------------------------------------------
  DmpHubDynamoTableReadPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'DMPHub - Read access to the DynamoDB Table'
      ManagedPolicyName: 'DmpHubDynamoReadPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 'dynamodb:BatchGetItem'
            - 'dynamodb:Describe*'
            - 'dynamodb:List*'
            - 'dynamodb:GetItem'
            - 'dynamodb:Query'
            - 'dynamodb:Scan'
            - 'dynamodb:PartiQLSelect'
          Resource:
            - !Ref DynamoTableArn
            - !Sub '${DynamoTableArn}/index/*'

  DmpHubDynamoTableWritePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'DMPHub - Write access (and GetItem) to the DynamoDB Table'
      ManagedPolicyName: 'DmpHubDynamoWritePolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 'dynamodb:DeleteItem'
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:BatchWriteItem'
            - 'dynamodb:PartiQLInsert'
          Resource:
            - !Ref DynamoTableArn
            - !Sub '${DynamoTableArn}/index/*'

  EventBusPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'DMPHub - Access to the EventBus'
      ManagedPolicyName: 'DmpHubEventBusPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 'events:PutEvents'
          Resource: !Ref EventBusArn

  CognitoPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'DMPHub - Access to the Cognito User Pool Client'
      ManagedPolicyName: 'DmpHubCognitoPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 'cognito-idp:DescribeUserPoolClient'
          Resource: !Ref CognitoUserPoolArn

  S3BucketPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'DMPHub - Access to the S3 Bucket'
      ManagedPolicyName: 'DmpHubS3Policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 's3:DeleteObject'
            - 's3:GetObject'
            - 's3:GetObjectAttributes'
            - 's3:GetObjectTagging'
            - 's3:ListBucket'
            - 's3:PutObject'
            - 's3-object-lambda:*'
          Resource:
            - !Ref S3CloudFrontBucketArn
            - !Sub "${S3CloudFrontBucketArn}/*"

  # -----------------------------------------------------------
  # EC2 Security Groups for use with Lambdas that need to talk to the RDS database
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-ec2-security-group.html
  # -----------------------------------------------------------
  LambdaSecGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub 'RDS security group for Lambdas that will access RDS'
      GroupName: !Sub "${DomainName}-lambda-sec-grp"
      VpcId: !Ref VpcId

  LambdaSecGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: !Sub "${DomainName} Ingress rule to Lambda"
      GroupId: !GetAtt LambdaSecGroup.GroupId
      CidrIp: '0.0.0.0/0'
      IpProtocol: 'tcp'
      FromPort: '0'
      ToPort: '65535'

  LambdaSecGroupEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      Description: !Sub "${DomainName} Egress rule from Lambda to API Gateway"
      GroupId: !GetAtt LambdaSecGroup.GroupId
      CidrIp: '0.0.0.0/0'
      IpProtocol: 'tcp'
      FromPort: '0'
      ToPort: '65535'

  LambdaToRdsSecGroupIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      Description: !Sub "${DomainName} Ingress rule to Lambda"
      GroupId: !Ref DbSecGroupId
      SourceSecurityGroupId: !GetAtt LambdaSecGroup.GroupId
      IpProtocol: 'tcp'
      FromPort: '3306'
      ToPort: '3306'

  # ----------------------------------------------------
  # CloudWatch LogGroup
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_Logs.html
  # ----------------------------------------------------
  ApiAccessLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogRetentionDays

  # ----------------------------------------------------
  # API Definition
  #  see: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-api.html
  # ----------------------------------------------------
  DmpHubRestApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip": "$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'
      # TODO: Consider enabling caching in prod
      # Cache @ 0.5GB is $0.02 per hour! -> $0.48 per day -> roughly $15 per month
      # CacheClusterEnabled: true
      # CacheClusterSize: '0.5' # .5 GB

      Cors:
        # Values here need to be wrapped in single quotes, but the ENV variables passed into the
        # Lambdas do not! For example, "'GET,PUT'" defined here should be "GET, PUT" when passed
        # into the Lambdas as an ENV!
        AllowOrigin: !Sub "'https://${DomainName}'"
        AllowHeaders: !Sub "'${CorsHeaders}'"
        AllowMethods: "'DELETE, GET, OPTIONS, PATCH, POST, PUT'"

      DisableExecuteApiEndpoint: true
      Domain:
        DomainName: !Sub "api.${DomainName}"
        CertificateArn: !Ref CertificateArn
        EndpointConfiguration: 'EDGE'
        NormalizeBasePath: true
        Route53:
          EvaluateTargetHealth: true
          HostedZoneId: !Ref HostedZoneId
          BasePath:
            - /
      StageName: 'v0'
      OpenApiVersion: '3.0.1'
      TracingEnabled: true
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          DmpHubCognitoAuthorizer:
            UserPoolArn: !Ref CognitoUserPoolArn
            AuthType: 'COGNITO_USER_POOLS'
            Identity:
              Header: 'Authorization'
            AuthorizationScopes:
              - !Sub 'https://auth.${DomainName}/${Env}.delete'
              - !Sub 'https://auth.${DomainName}/${Env}.read'
              - !Sub 'https://auth.${DomainName}/${Env}.upload'
              - !Sub 'https:/auth.${DomainName}/${Env}.write'
        DefaultAuthorizer: DmpHubCognitoAuthorizer

  # TODO: Add the actual API domain name to SSM so it can be referenced in the Lambdas!
  #       figure out how to pass in the Env!
  # Add the API domain name to SSM so that our Lambdas can build pagination links
  ApiBaseUrlParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "DMPHub-${Env} API Base Domain"
      Name: !Sub "/uc3/dmp/hub/${Env}/ApiBaseUrl"
      # Note: AWS CloudFormation does not yet support creating a SecureString parameter type.
      Type: 'String'
      Value: !Sub "https://api.${DomainName}"

  # ----------------------------------------------------
  # Lambda Layers
  #   See: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-layerversion.html
  # ----------------------------------------------------
  LambdaLayer:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      LayerName: !Sub '${AWS::StackName}-lambda-layer'
      Description: !Sub 'Core Lambda Layer for DMPHub ${Env}'
      ContentUri: 'layers/uc3-dmp-hub-lambda-layer.zip'
      CompatibleRuntimes:
        - 'ruby2.7'
      RetentionPolicy: 'Delete'

  # ----------------------------------------------------
  # API Lambdas
  #  See: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-api.html
  # ----------------------------------------------------
  DeleteDmpFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/delete_dmp/'
      Handler: 'app.Functions::DeleteDmp.process'
      Runtime: 'ruby2.7'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - !Ref DmpHubDynamoTableWritePolicy
        - !Ref EventBusPolicy
        - !Ref CognitoPolicy
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          DOMAIN: !Ref DomainName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          EVENT_BUS_NAME: !Ref EventBusArn
          CORS_METHODS: 'DELETE'
          CORS_HEADERS: !Ref CorsHeaders
          CORS_ORIGIN: !Sub "https://${DomainName}"
      Events:
        DeleteDmps:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps/{dmp_id+}'
            Method: 'delete'
            RequestParameters:
              - 'method.request.header.Authorization'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.delete'

  # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  GetDmpFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/get_dmp/'
      Handler: 'app.Functions::GetDmp.process'
      Runtime: 'ruby2.7'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - !Ref DmpHubDynamoTableReadPolicy
        - !Ref S3BucketPolicy
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          CORS_METHODS: 'GET'
          CORS_HEADERS: !Ref CorsHeaders
          CORS_ORIGIN: !Sub "https://${DomainName}"
      Events:
        GetDmp:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps/{dmp_id+}'
            Method: 'get'
            Auth:
              Authorizer: 'NONE'

  # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  GetFundersFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      PackageType: 'Image'
      Timeout: 60
      Architectures:
        - 'x86_64'
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRDSDataFullAccess'
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          DATABASE_HOST: !Ref RdsHost
          DATABASE_PORT: !Ref RdsPort
          DATABASE_NAME: !Ref RdsDbName
          CORS_METHODS: 'GET'
          CORS_HEADERS: !Ref CorsHeaders
          CORS_ORIGIN: !Sub "https://${DomainName}"
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecGroup
        SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
          - !Ref SubnetC
      Events:
        GetFunders:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/funders'
            Method: 'get'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.read'
    Metadata:
      DockerTag: 'getFunders-v0'
      DockerContext: 'functions/get_funders/'
      Dockerfile: 'Dockerfile'
      DockerBuildArgs:
        "--platform": 'linux/arm64/v8'

  # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  GetOrgsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      PackageType: 'Image'
      Timeout: 60
      Architectures:
        - 'x86_64'
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRDSDataFullAccess'
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          DATABASE_HOST: !Ref RdsHost
          DATABASE_PORT: !Ref RdsPort
          DATABASE_NAME: !Ref RdsDbName
          CORS_METHODS: 'GET'
          CORS_HEADERS: !Ref CorsHeaders
          CORS_ORIGIN: !Sub "https://${DomainName}"
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecGroup
        SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
          - !Ref SubnetC
      Events:
        GetFunders:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/orgs'
            Method: 'get'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.read'
    Metadata:
      DockerTag: 'getOrgs-v0'
      DockerContext: 'functions/get_orgs/'
      Dockerfile: 'Dockerfile'
      DockerBuildArgs:
        "--platform": 'linux/arm64/v8'

  # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  GetrepositoriesFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      PackageType: 'Image'
      Timeout: 60
      Architectures:
        - 'x86_64'
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonRDSDataFullAccess'
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          DATABASE_HOST: !Ref RdsHost
          DATABASE_PORT: !Ref RdsPort
          DATABASE_NAME: !Ref RdsDbName
          CORS_METHODS: 'GET'
          CORS_HEADERS: !Ref CorsHeaders
          CORS_ORIGIN: !Sub "https://${DomainName}"
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecGroup
        SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
          - !Ref SubnetC
      Events:
        GetFunders:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/repositories'
            Method: 'get'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.read'
    Metadata:
      DockerTag: 'getRepositories-v0'
      DockerContext: 'functions/get_repositories/'
      Dockerfile: 'Dockerfile'
      DockerBuildArgs:
        "--platform": 'linux/arm64/v8'

  # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  GetMeFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/get_me/'
      Handler: 'app.Functions::GetMe.process'
      Runtime: 'ruby2.7'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          CORS_METHODS: 'GET'
          CORS_HEADERS: !Ref CorsHeaders
          CORS_ORIGIN: !Sub "https://${DomainName}"
      Events:
        GetMe:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/me'
            Method: 'get'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.read'

  # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  GetContributorRolesFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/get_contributor_roles/'
      Handler: 'app.Functions::GetContributorRoles.process'
      Runtime: 'ruby2.7'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          CORS_METHODS: 'GET'
          CORS_HEADERS: !Ref CorsHeaders
          CORS_ORIGIN: !Sub "https://${DomainName}"
      Events:
        GetMe:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/contributor_roles'
            Method: 'get'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.read'

  PostDmpsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/post_dmps/'
      Handler: 'app.Functions::PostDmps.process'
      Runtime: 'ruby2.7'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - !Ref DmpHubDynamoTableWritePolicy
        - !Ref EventBusPolicy
        - !Ref CognitoPolicy
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          DOMAIN: !Ref DomainName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          EVENT_BUS_NAME: !Ref EventBusArn
          CORS_METHODS: 'POST'
          CORS_HEADERS: !Ref CorsHeaders
          CORS_ORIGIN: !Sub "https://${DomainName}"
      Events:
        PostDmps:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps'
            Method: 'post'
            RequestParameters:
              - 'method.request.header.Authorization'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.write'

  PutDmpFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/put_dmp/'
      Handler: 'app.Functions::PutDmp.process'
      Runtime: 'ruby2.7'
      Timeout: 10
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - !Ref DmpHubDynamoTableWritePolicy
        - !Ref EventBusPolicy
        - !Ref CognitoPolicy
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          DOMAIN: !Ref DomainName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          EVENT_BUS_NAME: !Ref EventBusArn
          CORS_METHODS: 'PUT'
          CORS_HEADERS: !Ref CorsHeaders
          CORS_ORIGIN: !Sub "https://${DomainName}"
      Events:
        PutDmps:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps/{dmp_id+}'
            Method: 'put'
            RequestParameters:
              - 'method.request.header.Authorization'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.write'

  ValidateDmpFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/validate_dmp/'
      Handler: 'app.Functions::ValidateDmp.process'
      Runtime: 'ruby2.7'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          CORS_METHODS: 'POST'
          CORS_HEADERS: !Ref CorsHeaders
          CORS_ORIGIN: !Sub "https://${DomainName}"
      Events:
        ValidateDmp:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps/validate'
            Method: 'post'
            Auth:
              Authorizer: 'NONE'

  # ----------------------------------------------------
  # EventBridge Lambdas
  #   See: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-sns.html
  # ----------------------------------------------------
  # Lambda responsible for communications with EZID
  EzidPublisherFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/ezid_publisher/'
      Handler: 'app.Functions::EzidPublisher.process'
      Runtime: 'ruby2.7'
      Timeout: 30
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
        - !Ref DmpHubDynamoTableWritePolicy
        - !Ref EventBusPolicy
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          DOMAIN: !Ref DomainName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
      Events:
        EzidPublishEvent:
          Type: 'EventBridgeRule'
          Properties:
            DeadLetterConfig:
              Arn: !Ref DeadLetterQueueArn
            EventBusName: !Ref EventBusArn
            Pattern: !Sub >
              {
                "source": ["${DomainName}:lambda:event_publisher"],
                "detail-type": ["DMP change", "EZID Replay"],
                "detail": {
                  "SK": ["VERSION#latest"]
                }
              }
            RetryPolicy:
              MaximumEventAgeInSeconds: 180
              MaximumRetryAttempts: 3
            State: 'ENABLED'  # 'DISABLED'

  EzidPublisherPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref EzidPublisherFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      # SourceArn: !GetAtt EzidPublisherEventRule.Arn

  # Annoyingly, SAM does not auto-generate LogGroup for a non-API tiggered lambda
  EzidPublisherFunctionLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn:
      - EzidPublisherFunction
    Properties:
      LogGroupName: !Sub "/aws/lambda/${EzidPublisherFunction}"
      RetentionInDays: 14

  # Lambda responsible for fetching PDFs from the provenance systems (e.g. DMPTool)
  PdfDownloaderFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/pdf_downloader/'
      Handler: 'app.Functions::PdfDownloader.process'
      Runtime: 'ruby2.7'
      Timeout: 120 # DMPTool can be a bit slow producing these
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
        - !Ref DmpHubDynamoTableWritePolicy
        - !Ref S3BucketPolicy
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          DOMAIN: !Ref DomainName
          # ACCOUNT_ID: !Ref AWS::AccountId
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          S3_BUCKET: !Ref S3CloudFrontBucketArn
      Events:
        PdfDownloadEvent:
          Type: 'EventBridgeRule'
          Properties:
            DeadLetterConfig:
              Arn: !Ref DeadLetterQueueArn
            EventBusName: !Ref EventBusArn
            Pattern: !Sub >
              {
                "source": ["${DomainName}:lambda:event_publisher"],
                "detail-type": ["DMP change"],
                "detail": {
                  "SK": ["VERSION#latest"],
                  "dmproadmap_links": {
                    "download": [ { "exists": true } ]
                  }
                }
              }
            RetryPolicy:
              MaximumEventAgeInSeconds: 360
              MaximumRetryAttempts: 2
            State: 'ENABLED'  # 'DISABLED'

  # Annoyingly, SAM does not auto-generate LogGroup for a non-API tiggered lambda and
  # it expects a specific name :/
  PdfDownloaderFunctionLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn:
      - PdfDownloaderFunction
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PdfDownloaderFunction}"
      RetentionInDays: 14

  # Lambda responsible for letting the provenance system (owner of the DMP ID) know when another
  # system has modified one of their DMP IDs
  ProvenanceNotifierFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/provenance_notifier/'
      Handler: 'app.Functions::ProvenanceNotifier.process'
      Runtime: 'ruby2.7'
      Timeout: 30
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
        - !Ref DmpHubDynamoTableWritePolicy
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          DOMAIN: !Ref DomainName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
      Events:
        ProvenanceNotifyEvent:
          Type: 'EventBridgeRule'
          Properties:
            DeadLetterConfig:
              Arn: !Ref DeadLetterQueueArn
            EventBusName: !Ref EventBusArn
            Pattern: !Sub >
              {
                "source": ["${DomainName}:lambda:event_publisher"],
                "detail-type": ["DMP change"],
                "detail": {
                  "SK": ["VERSION#latest"],
                  "updater_not_provenance": [true]
                }
              }
            RetryPolicy:
              MaximumEventAgeInSeconds: 180
              MaximumRetryAttempts: 3
            State: 'ENABLED'  # 'DISABLED'

  # Annoyingly, SAM does not auto-generate LogGroup for a non-API tiggered lambda
  ProvenanceNotifierFunctionLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn:
      - ProvenanceNotifierFunction
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProvenanceNotifierFunction}"
      RetentionInDays: 14

Outputs:
  DmpHubDynamoTableReadPolicyArn:
    Value: !Ref DmpHubDynamoTableReadPolicy
  DmpHubDynamoTableWritePolicyArn:
    Value: !Ref DmpHubDynamoTableWritePolicy
  S3BucketPolicyArn:
    Value: !Ref S3BucketPolicy

  LambdaSecGroupId:
    Value: !Ref LambdaSecGroup

  DeleteDmpFunctionArn:
    Value: !GetAtt DeleteDmpFunction.Arn
    Export:
      Name: DeleteDmpFunctionArn
  GetDmpFunctionArn:
    Value: !GetAtt GetDmpFunction.Arn
    Export:
      Name: GetDmpFunctionArn
  PostDmpsFunctionArn:
    Value: !GetAtt PostDmpsFunction.Arn
    Export:
      Name: PostDmpsFunctionArn
  PutDmpFunctionArn:
    Value: !GetAtt PutDmpFunction.Arn
    Export:
      Name: PutDmpFunctionArn
  ValidateDmpFunctionArn:
    Value: !GetAtt ValidateDmpFunction.Arn
    Export:
      Name: ValidateDmpFunctionArn

  EzidPublisherFunctionArn:
    Value: !GetAtt EzidPublisherFunction.Arn
  PdfDownloaderFunctionArn:
    Value: !GetAtt PdfDownloaderFunction.Arn
  ProvenanceNotifierFunctionArn:
    Value: !GetAtt ProvenanceNotifierFunction.Arn

  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  SwaggerUiEndpoint:
    Value: !Sub "GET https://${DmpHubRestApi}.execute-api.${AWS::Region}.amazonaws.com/v0/api-docs/"
  DeleteDmpEndpoint:
    Value: !Sub "DELETE https://${DmpHubRestApi}.execute-api.${AWS::Region}.amazonaws.com/v0/dmps/{dmp_id+}"
  GetDmpEndpoint:
    Value: !Sub "GET https://${DmpHubRestApi}.execute-api.${AWS::Region}.amazonaws.com/v0/dmps/{dmp_id+}"
  PostDmpsEndpoint:
    Value: !Sub "POST https://${DmpHubRestApi}.execute-api.${AWS::Region}.amazonaws.com/v0/dmps"
  PutDmpEndpoint:
    Value: !Sub "PUT https://${DmpHubRestApi}.execute-api.${AWS::Region}.amazonaws.com/v0/dmps/{dmp_id+}"
  ValidateDmpEndpoint:
    Value: !Sub "POST https://${DmpHubRestApi}.execute-api.${AWS::Region}.amazonaws.com/v0/dmps/validate"

  ApiBaseUrl:
    Value: !Sub "https://${DmpHubRestApi}.execute-api.${AWS::Region}.amazonaws.com/v0/"