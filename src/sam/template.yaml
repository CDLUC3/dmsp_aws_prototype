AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: >
  dmp-hub-sam

  Sample SAM Template for dmp-hub-sam

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Tracing: 'Active'

Parameters:
  HostedZoneId:
    Type: 'String'

  EventBusArn:
    Type: 'String'

  Env:
    Type: 'String'
    Default: 'dev'

  DebugLevel:
    Type: 'String'
    Default: 'error'
    AllowedValues:
      - 'error'
      - 'info'
      - 'debug'

  CertificateArn:
    Type: 'String'

  CognitoUserPoolArn:
    Type: 'String'

  DomainName:
    Type: 'String'

  DynamoTableArn:
    Type: 'String'

  DynamoTableName:
    Type: 'String'

  # DynamoTableStreamArn:
  #   Type: 'String'

  # OpenSearchDomain:
  #   Type: 'String'

  # ResourcesDynamoTableArn:
  #   Type: 'String'

  # ResourcesDynamoTableName:
  #   Type: 'String'

  S3CloudFrontBucketArn:
    Type: 'String'

  S3PrivateBucketId:
    Type: 'String'

  SnsEmailTopicArn:
    Type: 'String'

  DeadLetterQueueArn:
    Type: 'String'

  CacheSizeGb:
    Type: 'String'
    Default: '0.5'

  LogRetentionDays:
    Type: 'Number'
    Default: 14

Conditions:
  IsDev:
    !Equals [!Ref Env, 'dev']

Resources:
  # -----------------------------------------------------------
  # SSM Parameter used to toggle lambda debug mode
  # -----------------------------------------------------------
  # Places all lambdas into debug mode which means that the CloudWatch logs will become verbose
  DebugParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "${AWS::StackName} Lambda Debug on/off flag"
      Name: !Sub "/uc3/dmp/hub/${Env}/Debug"
      Type: 'String'
      Value: 'false'

  # ----------------------------------------------------
  # Managed IAM Policies for DMPHub resources
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-iam-managedpolicy.html
  # ----------------------------------------------------
  DmpHubDynamoTableReadPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'DMPHub - Read access to the DynamoDB Table'
      ManagedPolicyName: !Sub 'DmpHub${Env}DynamoReadPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 'dynamodb:BatchGetItem'
            - 'dynamodb:Describe*'
            - 'dynamodb:List*'
            - 'dynamodb:GetItem'
            - 'dynamodb:Query'
            - 'dynamodb:Scan'
            - 'dynamodb:PartiQLSelect'
          Resource:
            - !Ref DynamoTableArn
            - !Sub '${DynamoTableArn}/index/*'

  DmpHubDynamoTableWritePolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'DMPHub - Write access (and GetItem) to the DynamoDB Table'
      ManagedPolicyName: !Sub 'DmpHub${Env}DynamoWritePolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 'dynamodb:DeleteItem'
            - 'dynamodb:GetItem'
            - 'dynamodb:PutItem'
            - 'dynamodb:BatchWriteItem'
            - 'dynamodb:PartiQLInsert'
            - 'dynamodb:Query'
            - 'dynamodb:Scan'
          Resource:
            - !Ref DynamoTableArn
            - !Sub '${DynamoTableArn}/index/*'

  # ResourcesDynamoTableWritePolicy:
  #   Type: 'AWS::IAM::ManagedPolicy'
  #   Properties:
  #     Description: '${AWS::StackName} - Write access (and GetItem) to the ResourcesDynamoDB Table'
  #     ManagedPolicyName: !Sub 'DmpHub${Env}ResourcesDynamoWritePolicy'
  #     PolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         Effect: 'Allow'
  #         Action:
  #           - 'dynamodb:DeleteItem'
  #           - 'dynamodb:GetItem'
  #           - 'dynamodb:PutItem'
  #           - 'dynamodb:BatchWriteItem'
  #           - 'dynamodb:PartiQLInsert'
  #           - 'dynamodb:Query'
  #           - 'dynamodb:Scan'
  #         Resource:
  #           - !Ref ResourcesDynamoTableArn
  #           - !Sub '${ResourcesDynamoTableArn}/index/*'

  # # Role to allow a Lambda function to read from the DynamoDB Table Stream and Send an SNS notification
  # DynamoTableStreamRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     Description: !Sub '%{AWS::StackName} - Allow Lambda to access the Dynamo Stream and write to OpenSearch'
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         Effect: 'Allow'
  #         Action: 'sts:AssumeRole'
  #         Principal:
  #           Service: 'lambda.amazonaws.com'
  #     ManagedPolicyArns:
  #       - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
  #       - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
  #       - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
  #       - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
  #     Policies:
  #       - PolicyName: !Sub '${AWS::StackName}-LambdaReadDynamoStream'
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             Effect: 'Allow'
  #             Action:
  #               - 'dynamodb:DescribeStream'
  #               - 'dynamodb:GetRecords'
  #               - 'dynamodb:GetShardIterator'
  #               - 'dynamodb:ListStreams'
  #             Resource: !Sub '${DynamoTableArn}/stream/*'
  #       - PolicyName: !Sub '${AWS::StackName}-LambdaWriteOpenSearch'
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             Effect: 'Allow'
  #             Action:
  #               - 'es:ESHttpPost'
  #               - 'es:ESHttpPut'
  #             Resource: '*'

  EventBusPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'DMPHub - Access to the EventBus'
      ManagedPolicyName: !Sub 'DmpHub${Env}EventBusPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 'events:PutEvents'
          Resource: !Ref EventBusArn

  CognitoPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'DMPHub - Access to the Cognito User Pool Client'
      ManagedPolicyName: !Sub 'DmpHub${Env}CognitoPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 'cognito-idp:DescribeUserPoolClient'
          Resource: !Ref CognitoUserPoolArn

  S3BucketPolicy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      Description: 'DMPHub - Access to the S3 Bucket'
      ManagedPolicyName: !Sub 'DmpHub${Env}S3Policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: 'Allow'
          Action:
            - 's3:DeleteObject'
            - 's3:GetObject'
            - 's3:GetObjectAttributes'
            - 's3:GetObjectTagging'
            - 's3:ListBucket'
            - 's3:PutObject'
            - 's3-object-lambda:*'
          Resource:
            - !Ref S3CloudFrontBucketArn
            - !Sub "${S3CloudFrontBucketArn}/*"

  # ----------------------------------------------------
  # CloudWatch LogGroup
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_Logs.html
  # ----------------------------------------------------
  ApiAccessLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref LogRetentionDays

  # ----------------------------------------------------
  # API Definition
  #  see: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-api.html
  # ----------------------------------------------------
  DmpHubRestApi:
    Type: 'AWS::Serverless::Api'
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","xrayTraceId":"$context.xrayTraceId","status":$context.status,"responseLatency":$context.responseLatency,"responseLength":"$context.responseLength","integrationRequestId":"$context.integration.requestId","integrationResponseStatus":"$context.integration.status","integrationLatency": "$context.integration.latency","ip": "$context.identity.sourceIp","userAgent": "$context.identity.userAgent","cognitoUser": "$context.identity.cognitoIdentityId"}'

      # Cache @ 0.5GB is $0.02 per hour -> $0.48 per day -> roughly $15 per month
      CacheClusterEnabled: !If
        - IsDev
        - false
        - true
      CacheClusterSize: !Ref CacheSizeGb

      # Values here need to be wrapped in single quotes, but the ENV variables passed into the
      # Lambdas do not! For example, "'GET,PUT'" defined here should be "GET, PUT" when passed
      # into the Lambdas as an ENV!
      Cors:
        AllowHeaders: !Sub "'Accept, Authorization, Content-Type, Origin, Referer, User-Agent'"
        AllowMethods: "'GET, PUT, POST, DELETE, OPTIONS'"
        AllowOrigin: !If
        - IsDev
        - "'*'"
        - !Sub "'https://${DomainName}'"

      DisableExecuteApiEndpoint: true
      Domain:
        DomainName: !Sub "api.${DomainName}"
        CertificateArn: !Ref CertificateArn
        EndpointConfiguration: 'EDGE'
        NormalizeBasePath: true
        Route53:
          EvaluateTargetHealth: true
          HostedZoneId: !Ref HostedZoneId
          BasePath:
            - /
      StageName: 'v0'
      OpenApiVersion: '3.0.1'
      TracingEnabled: true
      BinaryMediaTypes:
        - 'application/pdf'
        - 'multipart/form-data'
      Auth:
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          DmpHubCognitoAuthorizer:
            UserPoolArn: !Ref CognitoUserPoolArn
            AuthType: 'COGNITO_USER_POOLS'
            Identity:
              Header: 'Authorization'
            AuthorizationScopes:
              - !Sub 'https://auth.${DomainName}/${Env}.delete'
              - !Sub 'https://auth.${DomainName}/${Env}.read'
              - !Sub 'https://auth.${DomainName}/${Env}.upload'
              - !Sub 'https:/auth.${DomainName}/${Env}.write'
        DefaultAuthorizer: DmpHubCognitoAuthorizer

  # TODO: Add the actual API domain name to SSM so it can be referenced in the Lambdas!
  #       figure out how to pass in the Env!
  # Add the API domain name to SSM so that our Lambdas can build pagination links
  ApiBaseUrlParameter:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: !Sub "DMPHub-${Env} API Base Domain"
      Name: !Sub "/uc3/dmp/hub/${Env}/ApiBaseUrl"
      # Note: AWS CloudFormation does not yet support creating a SecureString parameter type.
      Type: 'String'
      Value: !Sub "https://api.${DomainName}"

  # ----------------------------------------------------
  # Lambda Layers
  #   See: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-layerversion.html
  # ----------------------------------------------------
  LambdaLayer:
    Type: 'AWS::Serverless::LayerVersion'
    Properties:
      LayerName: !Sub '${AWS::StackName}-lambda-layer'
      Description: !Sub 'Core Lambda Layer for DMPHub ${Env}'
      ContentUri: !Sub 'layers'
        # Bucket: !Ref S3PrivateBucketId
        # Key: !Sub 'lambdas/uc3-dmp-hub-${Env}-sam-resources-lambda-layer.zip'
      CompatibleRuntimes:
        - 'ruby3.2'
      RetentionPolicy: 'Delete'
    Metadata:
      BuildMethod: 'makefile'
      BuildArchitecture: 'x86_64'

  # ----------------------------------------------------
  # API Lambdas
  #  See: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-api.html
  # ----------------------------------------------------
  TmpAsserterFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/tmp_asserter/'
      Handler: 'app.Functions::TmpAsserter.process'
      Runtime: 'ruby3.2'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - !Ref DmpHubDynamoTableWritePolicy
        - !Ref EventBusPolicy
        - !Ref CognitoPolicy
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: 'debug'
          DOMAIN: !Ref DomainName
          DMP_ID_BASE_URL: 'doi.org'
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          EVENT_BUS_NAME: !Ref EventBusArn
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolArn
          DYNAMO_TABLE: !Ref DynamoTableName
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        TmpAsserterEvent:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/tmp/{dmp_id+}/'
            Method: 'put'
            RequestParameters:
              - 'method.request.header.Authorization'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.write'

  TmpAsserterLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${TmpAsserterFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  DeleteDmpFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/api/delete_dmp/'
      Handler: 'app.Functions::DeleteDmp.process'
      Runtime: 'ruby3.2'
      Timeout: 15
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - !Ref DmpHubDynamoTableWritePolicy
        - !Ref EventBusPolicy
        - !Ref CognitoPolicy
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          DMP_ID_BASE_URL: 'doi.org'
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          EVENT_BUS_NAME: !Ref EventBusArn
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolArn
          DYNAMO_TABLE: !Ref DynamoTableName
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        DeleteDmps:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps/{dmp_id+}'
            Method: 'delete'
            RequestParameters:
              - 'method.request.header.Authorization'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.delete'

  DeleteDmpLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DeleteDmpFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Proxy for searching the Crossref Grant registry
  GetAwardsCrossrefApiFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/api/get_awards_crossref/'
      Handler: 'app.Functions::GetAwardsCrossref.process'
      Runtime: 'ruby3.2'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: 'debug' # !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        GetAwardsCrossref:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/awards/crossref/{funder_id+}'
            Method: 'get'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.read'

  GetAwardsCrossrefLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetAwardsCrossrefApiFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Proxy for searching the NIH Award API
  GetAwardsNihApiFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/api/get_awards_nih/'
      Handler: 'app.Functions::GetAwardsNih.process'
      Runtime: 'ruby3.2'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        GetAwardsNih:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/awards/nih'
            Method: 'get'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.read'

  GetAwardsNihLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetAwardsNihApiFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Proxy for searching the NSF Awards API
  GetAwardsNsfApiFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/api/get_awards_nsf/'
      Handler: 'app.Functions::GetAwardsNsf.process'
      Runtime: 'ruby3.2'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        GetAwardsNsf:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/awards/nsf'
            Method: 'get'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.read'

  GetAwardsNsfLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetAwardsNsfApiFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Fetch the specified DMP ID
  GetDmpFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/api/get_dmp/'
      Handler: 'app.Functions::GetDmp.process'
      Runtime: 'ruby3.2'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - !Ref DmpHubDynamoTableReadPolicy
        - !Ref S3BucketPolicy
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DMP_ID_BASE_URL: 'doi.org'
          DYNAMO_TABLE: !Ref DynamoTableName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        GetDmp:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps/{dmp_id+}'
            Method: 'get'
            Auth:
              Authorizer: 'NONE'

  GetDmpLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetDmpFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Search for DMP IDs
  GetDmpsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/api/get_dmps/'
      Handler: 'app.Functions::GetDmps.process'
      Runtime: 'ruby3.2'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonCognitoReadOnly'
        - !Ref DmpHubDynamoTableReadPolicy
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolArn
          DYNAMO_TABLE: !Ref DynamoTableName
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        GetDmps:
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps'
            Method: 'get'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.read'

  GetDmpsLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetDmpsFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Get Citations for the DOIs
  PostCitationsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/api/post_citations/'
      Handler: 'app.Functions::PostCitations.process'
      Runtime: 'ruby3.2'
      Timeout: 60
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: 'debug' # !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        PostCitations:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/citations'
            Method: 'post'
            RequestParameters:
              - 'method.request.header.Authorization'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.read'

  PostCitationsLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PostCitationsFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Register a new DMP ID
  PostDmpsFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/api/post_dmps/'
      Handler: 'app.Functions::PostDmps.process'
      Runtime: 'ruby3.2'
      Timeout: 15
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - !Ref DmpHubDynamoTableWritePolicy
        - !Ref EventBusPolicy
        - 'arn:aws:iam::aws:policy/AmazonCognitoReadOnly'
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          EVENT_BUS_NAME: !Ref EventBusArn
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolArn
          DYNAMO_TABLE: !Ref DynamoTableName
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        PostDmps:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps'
            Method: 'post'
            RequestParameters:
              - 'method.request.header.Authorization'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.write'

  PostDmpsLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PostDmpsFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Upload a PDF narrative document and attach it to the specified DMP ID
  PostNarrativesFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/api/post_narratives/'
      Handler: 'app.Functions::PostNarratives.process'
      Runtime: 'ruby3.2'
      Timeout: 15
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonCognitoReadOnly'
        - !Ref DmpHubDynamoTableWritePolicy
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          S3_BUCKET: !Ref S3CloudFrontBucketArn
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          EVENT_BUS_NAME: !Ref EventBusArn
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolArn
          DYNAMO_TABLE: !Ref DynamoTableName
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        PostNarratives:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/narratives'
            Method: 'post'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.write'

  PostNarrativesLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PostNarrativesFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # Update a DMP ID
  PutDmpFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/api/put_dmp/'
      Handler: 'app.Functions::PutDmp.process'
      Runtime: 'ruby3.2'
      Timeout: 30
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - !Ref DmpHubDynamoTableWritePolicy
        - !Ref EventBusPolicy
        - !Ref CognitoPolicy
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          DMP_ID_BASE_URL: 'doi.org'
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          EVENT_BUS_NAME: !Ref EventBusArn
          COGNITO_USER_POOL_ID: !Ref CognitoUserPoolArn
          DYNAMO_TABLE: !Ref DynamoTableName
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        PutDmps:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps/{dmp_id+}'
            Method: 'put'
            RequestParameters:
              - 'method.request.header.Authorization'
            Auth:
              Authorizer: 'DmpHubCognitoAuthorizer'
              AuthorizationScopes:
                - !Sub 'https://auth.${DomainName}/${Env}.write'

  PutDmpLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${PutDmpFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  ValidateDmpFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/api/validate_dmp/'
      Handler: 'app.Functions::ValidateDmp.process'
      Runtime: 'ruby3.2'
      Timeout: 5
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
      DeadLetterQueue:
        Type: 'SQS'
        TargetArn: !Ref DeadLetterQueueArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          CORS_ORIGIN: !If
            - IsDev
            - "*"
            - !Sub "https://${DomainName}"
      Events:
        ValidateDmp:
          # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Type: 'Api'
          Properties:
            RestApiId: !Ref DmpHubRestApi
            Path: '/dmps/validate'
            Method: 'post'
            Auth:
              Authorizer: 'NONE'

  ValidateLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ValidateDmpFunction}"
      # Explicit retention time
      RetentionInDays: !Ref LogRetentionDays

  # ----------------------------------------------------
  # Triggered Lambdas
  #   See: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-sns.html
  # ----------------------------------------------------
  # Lambda responsible for fetching BibTex citations
  CiterFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/triggered/citer/'
      Handler: 'app.Functions::Citer.process'
      Runtime: 'ruby3.2'
      # Depending on the DMP ID, there may be a lot of citations so we timeout after 5 minutes
      Timeout: 300
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
        - !Ref DmpHubDynamoTableWritePolicy
        - !Ref EventBusPolicy
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          DMP_ID_BASE_URL: 'doi.org'
          API_BASE_URL: !Sub 'https://api.${DomainName}'
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          EVENT_BUS_NAME: !Ref EventBusArn
          DYNAMO_TABLE: !Ref DynamoTableName
      Events:
        CiterEvent:
          Type: 'EventBridgeRule'
          Properties:
            DeadLetterConfig:
              Arn: !Ref DeadLetterQueueArn
            EventBusName: !Ref EventBusArn
            Pattern: !Sub >
              {
                "source": ["${DomainName}:lambda:event_publisher"],
                "detail-type": ["Citation Fetch"],
                "detail": {
                  "SK": ["VERSION#latest"]
                }
              }
            RetryPolicy:
              MaximumEventAgeInSeconds: 180
              MaximumRetryAttempts: 3
            State: 'ENABLED'  # 'DISABLED'

  CiterPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref CiterFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      # SourceArn: !GetAtt CiterEventRule.Arn

  # Annoyingly, SAM does not auto-generate LogGroup for a non-API tiggered lambda
  CiterFunctionLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn:
      - CiterFunction
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CiterFunction}"
      RetentionInDays: !Ref LogRetentionDays

  # Lambda that converts DynamoDB Stream events into OpenSearch records
  # DynamoToOpenSearchFunction:
  #   Type: 'AWS::Serverless::Function'
  #   Properties:
  #     CodeUri: 'functions/triggered/dynamo_to_opensearch/'
  #     Handler: 'app.Functions::DynamoToOpensearch.process'
  #     Runtime: 'ruby3.2'
  #     Timeout: 30
  #     Architectures:
  #       - 'x86_64'
  #     Layers:
  #       - !Ref LambdaLayer
  #     Role: !GetAtt DynamoTableStreamRole.Arn
  #     Environment:
  #       Variables:
  #         LAMBDA_ENV: !Ref Env
  #         LOG_LEVEL: !Ref DebugLevel # 'debug'
  #         OPEN_SEARCH_DOMAIN: !Ref OpenSearchDomain
  #     Events:
  #       DynamoDbOpenSearchEvent:
  #         # See: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-dynamodb.html
  #         Type: 'DynamoDB'
  #         Properties:
  #           Enabled: true
  #           StartingPosition: 'TRIM_HORIZON' # Other Options are 'AT_TIMESTAMP' and 'LATEST'
  #           # StartingPositionTimestamp: Double
  #           Stream: !Ref DynamoTableStreamArn
  #           DestinationConfig:
  #             OnFailure:
  #               Destination: !Ref DeadLetterQueueArn

  # DynamoToOpenSearchPermission:
  #   Type: 'AWS::Lambda::Permission'
  #   Properties:
  #     FunctionName: !Ref DynamoToOpenSearchFunction
  #     Action: 'lambda:InvokeFunction'
  #     Principal: 'events.amazonaws.com'

  # Annoyingly, SAM does not auto-generate LogGroup for a non-API tiggered lambda
  # DynamoToOpenSearchFunctionLogGroup:
  #   Type: 'AWS::Logs::LogGroup'
  #   DependsOn:
  #     - DynamoToOpenSearchFunction
  #   Properties:
  #     LogGroupName: !Sub "/aws/lambda/${DynamoToOpenSearchFunction}"
  #     RetentionInDays: !Ref LogRetentionDays

  # Lambda responsible for communications with EZID
  EzidPublisherFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/triggered/ezid_publisher/'
      Handler: 'app.Functions::EzidPublisher.process'
      Runtime: 'ruby3.2'
      Timeout: 30
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
        - !Ref DmpHubDynamoTableWritePolicy
        - !Ref EventBusPolicy
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          DMP_ID_BASE_URL: 'doi.org'
          API_BASE_URL: !Sub 'https://api.${DomainName}'
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          EVENT_BUS_NAME: !Ref EventBusArn
          DYNAMO_TABLE: !Ref DynamoTableName
      Events:
        EzidPublishEvent:
          Type: 'EventBridgeRule'
          Properties:
            DeadLetterConfig:
              Arn: !Ref DeadLetterQueueArn
            EventBusName: !Ref EventBusArn
            Pattern: !Sub >
              {
                "source": ["${DomainName}:lambda:event_publisher"],
                "detail-type": ["EZID update"],
                "detail": {
                  "SK": ["VERSION#latest"]
                }
              }
            RetryPolicy:
              MaximumEventAgeInSeconds: 180
              MaximumRetryAttempts: 3
            State: 'ENABLED'  # 'DISABLED'

  EzidPublisherPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref EzidPublisherFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      # SourceArn: !GetAtt EzidPublisherEventRule.Arn

  # Annoyingly, SAM does not auto-generate LogGroup for a non-API tiggered lambda
  EzidPublisherFunctionLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn:
      - EzidPublisherFunction
    Properties:
      LogGroupName: !Sub "/aws/lambda/${EzidPublisherFunction}"
      RetentionInDays: !Ref LogRetentionDays

  # Lambda responsible for communications with EZID
  # ExplorerRorFunction:
  #   Type: 'AWS::Serverless::Function'
  #   Properties:
  #     CodeUri: 'functions/triggered/explorer_ror/'
  #     Handler: 'app.Functions::ExplorerRor.process'
  #     Runtime: 'ruby3.2'
  #     # Extended timeout to 15 minutes and nbump the memory to .5GB here since we download the complete
  #     # ROR file and it is a large ZIP archive
  #     Timeout: 900
  #     MemorySize: 512
  #     Architectures:
  #       - 'x86_64'
  #     Layers:
  #       - !Ref LambdaLayer
  #     Policies:
  #       - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
  #       - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
  #       - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
  #       - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
  #       - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
  #       - !Ref ResourcesDynamoTableWritePolicy
  #       - !Ref EventBusPolicy
  #     Environment:
  #       Variables:
  #         LAMBDA_ENV: !Ref Env
  #         LOG_LEVEL: !Ref DebugLevel # 'debug'
  #         DOMAIN: !Ref DomainName
  #         SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
  #         DYNAMO_TABLE: !Ref ResourcesDynamoTableName
  #         S3_BUCKET: !Ref S3PrivateBucketId
  #     Events:
  #       ExplorerRorEvent:
  #         Type: 'EventBridgeRule'
  #         Properties:
  #           DeadLetterConfig:
  #             Arn: !Ref DeadLetterQueueArn
  #           EventBusName: !Ref EventBusArn
  #           Pattern: !Sub >
  #             {
  #               "source": ["${DomainName}:lambda:event_publisher"],
  #               "detail-type": ["ExploreRor"]
  #             }
  #           RetryPolicy:
  #             MaximumEventAgeInSeconds: 180
  #             MaximumRetryAttempts: 3
  #           State: 'ENABLED'  # 'DISABLED'

  # ExplorerRorPermission:
  #   Type: 'AWS::Lambda::Permission'
  #   Properties:
  #     FunctionName: !Ref ExplorerRorFunction
  #     Action: 'lambda:InvokeFunction'
  #     Principal: 'events.amazonaws.com'

  # # Annoyingly, SAM does not auto-generate LogGroup for a non-API tiggered lambda
  # ExplorerRorFunctionLogGroup:
  #   Type: 'AWS::Logs::LogGroup'
  #   DependsOn:
  #     - ExplorerRorFunction
  #   Properties:
  #     LogGroupName: !Sub "/aws/lambda/${ExplorerRorFunction}"
  #     RetentionInDays: !Ref LogRetentionDays

  # Lambda responsible for communications with EZID
  AugmenterDataciteFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/triggered/augmenter_datacite/'
      Handler: 'app.Functions::AugmenterDatacite.process'
      Runtime: 'ruby3.2'
      # Depending on the DMP ID, there may be a lot of citations so we timeout after 5 minutes
      Timeout: 300
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
        - !Ref DmpHubDynamoTableWritePolicy
        - !Ref EventBusPolicy
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          DMP_ID_BASE_URL: 'doi.org'
          API_BASE_URL: !Sub 'https://api.${DomainName}'
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          EVENT_BUS_NAME: !Ref EventBusArn
          DYNAMO_TABLE: !Ref DynamoTableName
      Events:
        AugmenterDataciteEvent:
          Type: 'EventBridgeRule'
          Properties:
            DeadLetterConfig:
              Arn: !Ref DeadLetterQueueArn
            EventBusName: !Ref EventBusArn
            Pattern: !Sub >
              {
                "source": ["${DomainName}:lambda:event_publisher"],
                "detail-type": ["RelatedWorkScan"]
              }
            RetryPolicy:
              MaximumEventAgeInSeconds: 180
              MaximumRetryAttempts: 3
            State: 'ENABLED'  # 'DISABLED'

  AugmenterDatacitePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref AugmenterDataciteFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'

  # Annoyingly, SAM does not auto-generate LogGroup for a non-API tiggered lambda
  AugmenterDataciteFunctionLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn:
      - AugmenterDataciteFunction
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AugmenterDataciteFunction}"
      RetentionInDays: !Ref LogRetentionDays

  # ----------------------------------------------------
  # Scheduled Lambdas
  #   See: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-sns.html
  # ----------------------------------------------------
  # Lambda responsible for fetching BibTex citations
  AugmentationSchedulerFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: 'functions/scheduled/augmentation_scheduler'
      Handler: 'app.Functions::AugmentationScheduler.process'
      Runtime: 'ruby3.2'
      # Depending on the DMP ID, there may be a lot of citations so we timeout after 5 minutes
      Timeout: 300
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref LambdaLayer
      Policies:
        - 'arn:aws:iam::aws:policy/AmazonSSMFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSNSFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSQSFullAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
        - !Ref DmpHubDynamoTableWritePolicy
        - !Ref EventBusPolicy
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          DMP_ID_BASE_URL: 'doi.org'
          API_BASE_URL: !Sub 'https://api.${DomainName}'
          SNS_FATAL_ERROR_TOPIC: !Ref SnsEmailTopicArn
          EVENT_BUS_NAME: !Ref EventBusArn
          DYNAMO_TABLE: !Ref DynamoTableName
      Events:
        AugmentationSchedulerEvent:
          Type: 'EventBridgeRule'
          Properties:
            DeadLetterConfig:
              Arn: !Ref DeadLetterQueueArn
            EventBusName: !Ref EventBusArn
            Pattern: !Sub >
              {
                "source": ["${DomainName}:lambda:event_publisher"],
                "detail-type": ["ScannerStart"]
              }
            RetryPolicy:
              MaximumEventAgeInSeconds: 180
              MaximumRetryAttempts: 3
            State: 'ENABLED'

  AugmentationSchedulerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref AugmentationSchedulerFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'

  # Annoyingly, SAM does not auto-generate LogGroup for a non-API tiggered lambda
  AugmentationSchedulerFunctionLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn:
      - AugmentationSchedulerFunction
    Properties:
      LogGroupName: !Sub "/aws/lambda/${AugmentationSchedulerFunction}"
      RetentionInDays: !Ref LogRetentionDays

  # Scheduled events
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-rule.html#cfn-events-rule-scheduleexpression
  # AugmentationSchedulerDaily:
  #   Type: 'AWS::Events::Rule'
  #   Properties:
  #     # AWS CRON expressions have some nuances: https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-cron-expressions.html
  #     ScheduleExpression: 'cron(0 0 ? * * *)' # Every night at midnight
  #     Targets:
  #       - Id: !Ref AugmentationSchedulerFunction
  #         Arn: !GetAtt AugmentationSchedulerFunction.Arn

  # AugmentationSchedulerDailyPermission:
  #   Type: 'AWS::Lambda::Permission'
  #   Properties:
  #     FunctionName: !GetAtt AugmentationSchedulerFunction.Arn
  #     Action: 'lambda:InvokeFunction'
  #     Principal: 'events.amazonaws.com'
  #     SourceArn: !GetAtt AugmentationSchedulerDaily.Arn

  # Scheduled events to keep some of the API lambdas warm
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-rule.html#cfn-events-rule-scheduleexpression
  LambdaDmpWarmerRule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: 'rate(20 minutes)'
      Targets:
        - Id: !Ref DeleteDmpFunction
          Arn: !GetAtt DeleteDmpFunction.Arn
        - Id: !Ref GetDmpFunction
          Arn: !GetAtt GetDmpFunction.Arn
        - Id: !Ref PostDmpsFunction
          Arn: !GetAtt PostDmpsFunction.Arn
        - Id: !Ref PutDmpFunction
          Arn: !GetAtt PutDmpFunction.Arn
        - Id: !Ref ValidateDmpFunction
          Arn: !GetAtt ValidateDmpFunction.Arn

  # Lambda Permissions to allow the pre-warmer scheduled event to invoke the API Lambdas
  DeleteDmpWarmerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt DeleteDmpFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt LambdaDmpWarmerRule.Arn

  GetDmpWarmerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt GetDmpFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt LambdaDmpWarmerRule.Arn

  PostDmpsWarmerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt PostDmpsFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt LambdaDmpWarmerRule.Arn

  PutDmpWarmerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt PutDmpFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt LambdaDmpWarmerRule.Arn

  ValidateDmpWarmerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt ValidateDmpFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt LambdaDmpWarmerRule.Arn

  # Warmer for the Awards API Lambdas
  LambdaAwardWarmerRule:
    Type: 'AWS::Events::Rule'
    Properties:
      ScheduleExpression: 'rate(20 minutes)'
      Targets:
        - Id: !Ref GetAwardsCrossrefApiFunction
          Arn: !GetAtt GetAwardsCrossrefApiFunction.Arn
        - Id: !Ref GetAwardsNihApiFunction
          Arn: !GetAtt GetAwardsNihApiFunction.Arn
        - Id: !Ref GetAwardsNsfApiFunction
          Arn: !GetAtt GetAwardsNsfApiFunction.Arn

  # Lambda Permissions to allow the pre-warmer scheduled event to invoke the API Lambdas
  GetAwardsCrossrefWarmerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt GetAwardsCrossrefApiFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt LambdaAwardWarmerRule.Arn

  GetAwardsNihWarmerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt GetAwardsNihApiFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt LambdaAwardWarmerRule.Arn

  GetAwardsNsfWarmerPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt GetAwardsNsfApiFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt LambdaAwardWarmerRule.Arn

Outputs:
  DmpHubDynamoTableReadPolicyArn:
    Value: !Ref DmpHubDynamoTableReadPolicy
  DmpHubDynamoTableWritePolicyArn:
    Value: !Ref DmpHubDynamoTableWritePolicy
  S3BucketPolicyArn:
    Value: !Ref S3BucketPolicy

  DeleteDmpFunctionArn:
    Value: !GetAtt DeleteDmpFunction.Arn
  GetAwardsCrossrefFunctionArn:
    Value: !GetAtt GetAwardsCrossrefApiFunction.Arn
  GetAwardsNihunctionArn:
    Value: !GetAtt GetAwardsNihApiFunction.Arn
  GetAwardsNsfFunctionArn:
    Value: !GetAtt GetAwardsNsfApiFunction.Arn
  GetDmpFunctionArn:
    Value: !GetAtt GetDmpFunction.Arn
  PostDmpsFunctionArn:
    Value: !GetAtt PostDmpsFunction.Arn
  PostNarrativeFunctionArn:
    Value: !GetAtt PostNarrativesFunction.Arn
  PutDmpFunctionArn:
    Value: !GetAtt PutDmpFunction.Arn
  ValidateDmpFunctionArn:
    Value: !GetAtt ValidateDmpFunction.Arn
  EzidPublisherFunctionArn:
    Value: !GetAtt EzidPublisherFunction.Arn

  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  SwaggerUiEndpoint:
    Value: !Sub "GET https://${DmpHubRestApi}.execute-api.${AWS::Region}.amazonaws.com/v0/api-docs/"
  DeleteDmpEndpoint:
    Value: !Sub "DELETE https://${DmpHubRestApi}.execute-api.${AWS::Region}.amazonaws.com/v0/dmps/{dmp_id+}"
  GetDmpEndpoint:
    Value: !Sub "GET https://${DmpHubRestApi}.execute-api.${AWS::Region}.amazonaws.com/v0/dmps/{dmp_id+}"
  PostDmpsEndpoint:
    Value: !Sub "POST https://${DmpHubRestApi}.execute-api.${AWS::Region}.amazonaws.com/v0/dmps"
  PutDmpEndpoint:
    Value: !Sub "PUT https://${DmpHubRestApi}.execute-api.${AWS::Region}.amazonaws.com/v0/dmps/{dmp_id+}"
  ValidateDmpEndpoint:
    Value: !Sub "POST https://${DmpHubRestApi}.execute-api.${AWS::Region}.amazonaws.com/v0/dmps/validate"

  ApiBaseUrl:
    Value: !Sub "https://${DmpHubRestApi}.execute-api.${AWS::Region}.amazonaws.com/v0/"