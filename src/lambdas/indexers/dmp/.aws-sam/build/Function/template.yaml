AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: 'Typeahead DynamoTable Stream function that manages the DMP-IDs'

Parameters:
  Env:
    Type: 'String'
    Default: 'dev'

  DebugLevel:
    Type: 'String'
    Default: 'debug'

  LogRetentionDays:
    Type: 'Number'
    Default: 14

  SubnetA:
    Type: 'AWS::EC2::Subnet::Id'

  SubnetB:
    Type: 'AWS::EC2::Subnet::Id'

  SubnetC:
    Type: 'AWS::EC2::Subnet::Id'

  IndexerRoleArn:
    Type: 'String'

  LambdaSecurityGroupId:
    Type: 'String'

  OpenSearchSecurityGroupId:
    Type: 'String'

  OpenSearchDomainEndpoint:
    Type: 'String'

  BaselineLayerId:
    Type: 'String'

  DynamoTableStreamArn:
    Type: 'String'

  DeadLetterQueueArn:
    Type: 'String'

Resources:
  # Lambda that converts DynamoDB Stream events into OpenSearch records
  Function:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: './'
      Handler: 'app.Functions::DmpIndexer.process'
      Runtime: 'ruby3.2'
      Timeout: 600
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref BaselineLayerId
      Role: !Ref IndexerRoleArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          OPEN_SEARCH_DOMAIN: !Sub 'https://${OpenSearchDomainEndpoint}'
          OPEN_SEARCH_INDEX: !Sub '${Env}-dmp-id-search'
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
          - !Ref OpenSearchSecurityGroupId
        SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
          - !Ref SubnetC
      Events:
        DynamoDbOpenSearchEvent:
          # See: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-dynamodb.html
          Type: 'DynamoDB'
          Properties:
            Enabled: true
            StartingPosition: 'TRIM_HORIZON' # Other Options are 'AT_TIMESTAMP' and 'LATEST'
            # StartingPositionTimestamp: Double
            Stream: !Ref DynamoTableStreamArn
            DestinationConfig:
              OnFailure:
                Destination: !Ref DeadLetterQueueArn

  OpenSearchPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref Function
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'

  # Annoyingly, SAM does not auto-generate LogGroup for a non-API tiggered lambda
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn:
      - Function
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Function}"
      RetentionInDays: !Ref LogRetentionDays

Outputs:
  FunctionId:
    Value: !Ref Function

  FunctionArn:
    Value: !GetAtt Function.Arn

  LogGroupId:
    Value: !Ref LogGroup

  LogGroupArn:
    Value: !GetAtt LogGroup.Arn
