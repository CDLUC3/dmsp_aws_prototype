AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: 'ROR Harvesting function that runs monthly and syncs ROR data with the `institutions` table in RDS.'

Parameters:
  Env:
    Type: 'String'
    Default: 'dev'

  DomainName:
    Type: 'String'

  DebugLevel:
    Type: 'String'
    Default: 'debug'

  LogRetentionDays:
    Type: 'Number'
    Default: 14

  MaxRecordsPerProcessor:
    Type: 'Number'
    Default: 50000

  BaselineLayerId:
    Type: 'String'

  HarvesterRoleArn:
    Type: 'String'

  S3PrivateBucketId:
    Type: 'String'

  EventBusArn:
    Type: 'String'

  DeadLetterQueueArn:
    Type: 'String'

  TypeaheadTableName:
    Type: 'String'

Resources:
  # ----------------------------------------------------
  # Scheduled Lambda
  #   See: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-property-function-sns.html
  # ----------------------------------------------------
  DownloaderFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: './'
      Handler: 'downloader.Functions::RorDownloader.process'
      Runtime: 'ruby3.2'
      Timeout: 900
      MemorySize: 2000
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref BaselineLayerId
      Role: !Ref HarvesterRoleArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          DOMAIN: !Ref DomainName
          S3_BUCKET: !Ref S3PrivateBucketId
          DYNAMO_TABLE: !Ref TypeaheadTableName
          EVENT_BUS_NAME: !Ref EventBusArn
          PROCESSOR_RECORD_COUNT: !Ref MaxRecordsPerProcessor
      Events:
        RorDownloaderEvent:
          Type: 'EventBridgeRule'
          Properties:
            DeadLetterConfig:
              Arn: !Ref DeadLetterQueueArn
            EventBusName: !Ref EventBusArn
            Pattern: !Sub >
              {
                "source": ["${DomainName}:lambda:event_publisher"],
                "detail-type": ["RorDownloader"]
              }
            RetryPolicy:
              MaximumEventAgeInSeconds: 180
              MaximumRetryAttempts: 2
            State: 'ENABLED'  # 'DISABLED'

  ProcessorFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: './'
      Handler: 'processor.Functions::RorProcessor.process'
      Runtime: 'ruby3.2'
      Timeout: 900
      MemorySize: 2000
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref BaselineLayerId
      Role: !Ref HarvesterRoleArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          S3_BUCKET: !Ref S3PrivateBucketId
          DYNAMO_TABLE: !Ref TypeaheadTableName
      Events:
        RorHarvesterProcessorEvent:
          Type: 'EventBridgeRule'
          Properties:
            DeadLetterConfig:
              Arn: !Ref DeadLetterQueueArn
            EventBusName: !Ref EventBusArn
            Pattern: !Sub >
              {
                "source": ["${DomainName}:lambda:event_publisher"],
                "detail-type": ["RorProcessor"]
              }
            RetryPolicy:
              MaximumEventAgeInSeconds: 180
              MaximumRetryAttempts: 2
            State: 'ENABLED'  # 'DISABLED'

  DownloaderPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref DownloaderFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'

  ProcessorPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref ProcessorFunction
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'

  # Annoyingly, SAM does not auto-generate LogGroup for a non-API tiggered lambda
  DownloaderLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn:
      - DownloaderFunction
    Properties:
      LogGroupName: !Sub "/aws/lambda/${DownloaderFunction}"
      RetentionInDays: !Ref LogRetentionDays

  ProcessorLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn:
      - ProcessorFunction
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ProcessorFunction}"
      RetentionInDays: !Ref LogRetentionDays

  # ----------------------------------------------------
  # EventBus Scheduled Tasks - Trigger Lambdas defined below
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-rule.html#cfn-events-rule-scheduleexpression
  # ----------------------------------------------------
  DownloaderScheduleMonthly:
    Type: 'AWS::Events::Rule'
    Properties:
      # AWS CRON expressions have some nuances: https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-cron-expressions.html
      ScheduleExpression: 'cron(0 0 1 * ? *)' # 1st day of the month
      Targets:
        - Id: !Ref DownloaderFunction
          Arn: !GetAtt DownloaderFunction.Arn

  DownloaderScheduleMonthlyPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt DownloaderFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt DownloaderScheduleMonthly.Arn

Outputs:
  DownloaderFunctionId:
    Value: !Ref DownloaderFunction

  DownloaderFunctionArn:
    Value: !GetAtt DownloaderFunction.Arn

  ProcessorFunctionId:
    Value: !Ref ProcessorFunction

  ProcessorFunctionArn:
    Value: !GetAtt ProcessorFunction.Arn

  DownloaderLogGroupId:
    Value: !Ref DownloaderLogGroup

  DownloaderLogGroupArn:
    Value: !GetAtt DownloaderLogGroup.Arn

  ProcessorLogGroupId:
    Value: !Ref ProcessorLogGroup

  ProcessorLogGroupArn:
    Value: !GetAtt ProcessorLogGroup.Arn

  DownloaderEventBusRuleId:
    Value: !Ref DownloaderScheduleMonthly

  DownloaderEventBusRuleArn:
    Value: !GetAtt DownloaderScheduleMonthly.Arn
