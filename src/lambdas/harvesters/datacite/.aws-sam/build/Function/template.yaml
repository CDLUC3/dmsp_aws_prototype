AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: 'Lambda to harvest DataCite metadata on a schedule'

Parameters:
  Env:
    Type: 'String'
    Default: 'dev'

  DomainName:
    Type: 'String'

  DebugLevel:
    Type: 'String'
    Default: 'debug'

  LogRetentionDays:
    Type: 'Number'
    Default: 14

  SubnetA:
    Type: 'AWS::EC2::Subnet::Id'

  SubnetB:
    Type: 'AWS::EC2::Subnet::Id'

  SubnetC:
    Type: 'AWS::EC2::Subnet::Id'

  HarvesterRoleArn:
    Type: 'String'

  LambdaSecurityGroupId:
    Type: 'String'

  OpenSearchSecurityGroupId:
    Type: 'String'

  OpenSearchDomainEndpoint:
    Type: 'String'

  BaselineLayerId:
    Type: 'String'

  DynamoTableName:
    Type: 'String'

  EventBusArn:
    Type: 'String'

  DeadLetterQueueArn:
    Type: 'String'

Resources:
  # Lambda that converts DynamoDB Stream events into OpenSearch records
  Function:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: './'
      Handler: 'app.Functions::DataCiteHarvester.process'
      Runtime: 'ruby3.2'
      Timeout: 600
      Architectures:
        - 'x86_64'
      Layers:
        - !Ref BaselineLayerId
      Role: !Ref HarvesterRoleArn
      Environment:
        Variables:
          LAMBDA_ENV: !Ref Env
          LOG_LEVEL: !Ref DebugLevel # 'debug'
          OPEN_SEARCH_DOMAIN: !Sub 'https://${OpenSearchDomainEndpoint}'
          OPEN_SEARCH_INDEX: !Sub '${Env}-dmp-id-search'
          DYNAMO_TABLE: !Ref DynamoTableName
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroupId
          - !Ref OpenSearchSecurityGroupId
        SubnetIds:
          - !Ref SubnetA
          - !Ref SubnetB
          - !Ref SubnetC
      Events:
        DataCiteHarvesting:
          Type: 'EventBridgeRule'
          Properties:
            DeadLetterConfig:
              Arn: !Ref DeadLetterQueueArn
            EventBusName: !Ref EventBusArn
            Pattern: !Sub >
              {
                "source": ["${DomainName}:lambda:event_publisher"],
                "detail-type": ["DataciteHarvest"]
              }
            RetryPolicy:
              MaximumEventAgeInSeconds: 180
              MaximumRetryAttempts: 2
            State: 'ENABLED'  # 'DISABLED'

  FunctionPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref Function
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'

  # Annoyingly, SAM does not auto-generate LogGroup for a non-API tiggered lambda
  LogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn:
      - Function
    Properties:
      LogGroupName: !Sub "/aws/lambda/${Function}"
      RetentionInDays: !Ref LogRetentionDays

  # ----------------------------------------------------
  # EventBus Scheduled Tasks - Trigger Lambdas defined below
  #   See: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-events-rule.html#cfn-events-rule-scheduleexpression
  # ----------------------------------------------------
  ScheduledEventWeekly:
    Type: 'AWS::Events::Rule'
    Properties:
      # AWS CRON expressions have some nuances: https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-cron-expressions.html
      ScheduleExpression: 'cron(0 5 ? * SUN *)' # Every Sunday at 5am
      Targets:
        - Id: !Ref Function
          Arn: !GetAtt Function.Arn

  ScheduledEventWeeklyPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt Function.Arn
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt ScheduledEventWeekly.Arn

Outputs:
  FunctionId:
    Value: !Ref Function

  FunctionArn:
    Value: !GetAtt Function.Arn

  LogGroupId:
    Value: !Ref LogGroup

  LogGroupArn:
    Value: !GetAtt LogGroup.Arn
